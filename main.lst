
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
0800013c l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000040 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 ccjNAgLg.o
f108f85f l       *ABS*	00000000 BootRAM
08001e70 l       .text	00000000 LoopCopyDataInit
08001e68 l       .text	00000000 CopyDataInit
08001e84 l       .text	00000000 LoopFillZerobss
08001e7e l       .text	00000000 FillZerobss
08001eac l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32l152_eval.c
00000000 l    df *ABS*	00000000 misc.c
00000000 l    df *ABS*	00000000 stm32l1xx_dma.c
00000000 l    df *ABS*	00000000 stm32l1xx_exti.c
00000000 l    df *ABS*	00000000 stm32l1xx_gpio.c
00000000 l    df *ABS*	00000000 stm32l1xx_i2c.c
00000000 l    df *ABS*	00000000 stm32l1xx_rcc.c
08002090 l     O .text	00000009 PLLMulTable
0800209c l     O .text	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32l1xx_spi.c
00000000 l    df *ABS*	00000000 stm32l1xx_syscfg.c
00000000 l    df *ABS*	00000000 stm32l1xx_usart.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 system_stm32l1xx.c
00000000 l    df *ABS*	00000000 stm32l1xx_it.c
00000000 l    df *ABS*	00000000 main.c
2000006c l     O .bss	00000004 TimingDelay
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
08001eac  w    F .text	00000002 RTC_Alarm_IRQHandler
08001eac  w    F .text	00000002 EXTI2_IRQHandler
0800013c g     F .text	00000040 STM_EVAL_LEDInit
08001cf0 g     F .text	00000012 USART_SetGuardTime
080017d0 g     F .text	00000016 SYSCFG_DeInit
080011d0 g     F .text	0000000c RCC_HSICmd
08002070 g     O .text	00000008 COM_USART_CLK
08001eac  w    F .text	00000002 COMP_ACQ_IRQHandler
0800120c g     F .text	0000000c RCC_PLLCmd
08001fcc g     F .text	00000002 DebugMon_Handler
08000948 g     F .text	00000018 DMA_Cmd
080013d8 g     F .text	00000018 RCC_AHBPeriphResetCmd
08000ccc g     F .text	00000026 GPIO_PinAFConfig
080014c4 g     F .text	0000000c RCC_ClearITPendingBit
08000fbc g     F .text	0000001a I2C_TransmitPEC
20000040 g     O .bss	0000002c sEEDMA_InitStructure
08000c94 g     F .text	0000000c GPIO_ReadOutputDataBit
080009b0 g     F .text	0000001c DMA_GetITStatus
08000f94 g     F .text	00000006 I2C_ReceiveData
08001710 g     F .text	00000004 SPI_I2S_SendData
08001fc2 g     F .text	00000002 HardFault_Handler
08001eac  w    F .text	00000002 TIM10_IRQHandler
080001d4 g     F .text	000000a8 STM_EVAL_PBInit
0800109c g     F .text	00000010 I2C_GetLastEvent
08001eac  w    F .text	00000002 USB_HP_IRQHandler
08001eac  w    F .text	00000002 TIM6_IRQHandler
08001fd0 g     F .text	00000004 SysTick_Handler
08001230 g     F .text	0000000c RCC_MCOConfig
08000724 g     F .text	00000060 NVIC_Init
08000f24 g     F .text	0000001a I2C_ARPCmd
08000e9c g     F .text	00000014 I2C_OwnAddress2Config
080018fc g     F .text	00000038 SYSCFG_RIIOSwitchConfig
08001eac  w    F .text	00000002 PVD_IRQHandler
08001eac  w    F .text	00000002 SDIO_IRQHandler
08002088 g     O .text	00000004 COM_TX_PIN
080020c4 g       .text	00000000 _sidata
08001708 g     F .text	00000006 SPI_I2S_ReceiveData
0800181c g     F .text	0000001c SYSCFG_USBPuCmd
08001fce g     F .text	00000002 PendSV_Handler
080014d0 g     F .text	0000006c SPI_I2S_DeInit
08001fc0 g     F .text	00000002 NMI_Handler
20000070 g       .bss	00000000 __exidx_end
08001878 g     F .text	00000044 SYSCFG_RITIMInputCaptureConfig
08001748 g     F .text	00000006 SPI_GetCRCPolynomial
08001eac  w    F .text	00000002 EXTI3_IRQHandler
08001468 g     F .text	00000018 RCC_ITConfig
08001864 g     F .text	00000014 SYSCFG_RITIMSelect
08001420 g     F .text	00000018 RCC_AHBPeriphClockLPModeCmd
080016ac g     F .text	0000001e SPI_BiDirectionalLineConfig
08001d04 g     F .text	0000001a USART_SmartCardCmd
08001db8 g     F .text	0000000c USART_GetFlagStatus
080020c4 g       .text	00000000 _etext
20000040 g       .bss	00000000 _sbss
0800123c g     F .text	00000014 RCC_SYSCLKConfig
080008f0 g     F .text	0000003a DMA_Init
080009e0 g     F .text	00000018 EXTI_DeInit
0800115c g     F .text	00000034 RCC_WaitForHSEStartUp
080006d8 g     F .text	00000038 sEE_LowLevel_DMAConfig
08001c48 g     F .text	00000016 USART_SetAddress
08000964 g     F .text	00000006 DMA_GetCurrDataCounter
08002084 g     O .text	00000002 COM_RX_PIN_SOURCE
08001bec g     F .text	00000012 USART_SetPrescaler
20000010 g     O .data	00000018 BUTTON_PORT
08001c1c g     F .text	0000001a USART_OneBitMethodCmd
0800106c g     F .text	00000014 I2C_ITConfig
08000784 g     F .text	00000014 NVIC_SetVectorTable
08001218 g     F .text	0000000c RCC_ClockSecuritySystemCmd
08001eac  w    F .text	00000002 EXTI0_IRQHandler
08001eac  w    F .text	00000002 I2C2_EV_IRQHandler
080014a0 g     F .text	00000010 RCC_ClearFlag
08002018 g     O .text	00000018 BUTTON_CLK
0800029c g     F .text	00000090 STM_EVAL_COMInit
08001c40 g     F .text	00000008 USART_ReceiveData
0800114c g     F .text	00000010 RCC_HSEConfig
08000cc0 g     F .text	0000000a GPIO_ToggleBits
08001714 g     F .text	0000001a SPI_CalculateCRC
08001fc8 g     F .text	00000002 UsageFault_Handler
08000960 g     F .text	00000004 DMA_SetCurrDataCounter
08001790 g     F .text	00000008 SPI_I2S_ClearFlag
080013a8 g     F .text	00000018 RCC_APB2PeriphClockCmd
0800101c g     F .text	0000001a I2C_DMACmd
08000fd8 g     F .text	0000001e I2C_PECPositionConfig
08000bbc g     F .text	00000094 GPIO_Init
080011fc g     F .text	00000010 RCC_PLLConfig
08002010 g     O .text	00000008 GPIO_PIN
20000000 g       .data	00000000 _sdata
08001eac  w    F .text	00000002 SPI1_IRQHandler
08001bd0 g     F .text	0000001a USART_Cmd
08001d54 g     F .text	0000001a USART_IrDACmd
08002078 g     O .text	00000002 COM_TX_AF
08001950 g     F .text	000000d0 SYSCFG_RIHysteresisConfig
080007b0 g     F .text	00000016 SysTick_CLKSourceConfig
08000cbc g     F .text	00000004 GPIO_Write
08000ca0 g     F .text	00000006 GPIO_ReadOutputData
080011dc g     F .text	00000014 RCC_LSEConfig
08000ff8 g     F .text	0000001a I2C_CalculatePEC
08001e0c g     F .text	0000000e USART_ClearITPendingBit
08001378 g     F .text	0000000c RCC_RTCCLKCmd
080009cc g     F .text	00000014 DMA_ClearITPendingBit
080013c0 g     F .text	00000018 RCC_APB1PeriphClockCmd
080014b0 g     F .text	00000014 RCC_GetITStatus
20000070 g       .bss	00000000 __exidx_start
08001eac  w    F .text	00000002 USB_FS_WKUP_IRQHandler
08001798 g     F .text	00000028 SPI_I2S_GetITStatus
08001e1c g     F .text	00000048 __libc_init_array
08001784 g     F .text	0000000c SPI_I2S_GetFlagStatus
08001eac  w    F .text	00000002 DMA2_Channel2_IRQHandler
08001390 g     F .text	00000018 RCC_AHBPeriphClockCmd
08001eac  w    F .text	00000002 DMA1_Channel4_IRQHandler
08000f90 g     F .text	00000004 I2C_SendData
08001eac  w    F .text	00000002 ADC1_IRQHandler
08001c00 g     F .text	0000001a USART_OverSampling8Cmd
080020ac g     F .text	00000000 _init
0800092c g     F .text	0000001a DMA_StructInit
08001678 g     F .text	0000001a I2S_Cmd
080016ec g     F .text	0000001a SPI_SSOutputCmd
08001694 g     F .text	00000016 SPI_DataSizeConfig
08000d30 g     F .text	000000dc I2C_Init
08000980 g     F .text	0000001c DMA_GetFlagStatus
08001eac  w    F .text	00000002 USART3_IRQHandler
08000abc g     F .text	0000000c EXTI_ClearITPendingBit
20000070 g       .bss	00000000 _ebss
08001dcc g     F .text	00000040 USART_GetITStatus
08001eac  w    F .text	00000002 DMA1_Channel7_IRQHandler
08001e64  w    F .text	00000034 Reset_Handler
08000c8c g     F .text	00000006 GPIO_ReadInputData
08001c94 g     F .text	00000016 USART_LINBreakDetectLengthConfig
08001eac  w    F .text	00000002 LCD_IRQHandler
08001eac  w    F .text	00000002 UART5_IRQHandler
08001480 g     F .text	00000020 RCC_GetFlagStatus
0800208c g     O .text	00000004 COM_RX_PIN
080017e8 g     F .text	00000018 SYSCFG_RIDeInit
08000ca8 g     F .text	00000004 GPIO_SetBits
08001eac  w    F .text	00000002 TIM4_IRQHandler
08000a88 g     F .text	00000014 EXTI_GetFlagStatus
08001250 g     F .text	00000010 RCC_GetSYSCLKSource
08000cb0 g     F .text	0000000a GPIO_WriteBit
08001eac  w    F .text	00000002 DMA2_Channel1_IRQHandler
08000e48 g     F .text	0000001a I2C_GenerateSTART
08000e0c g     F .text	00000020 I2C_StructInit
20000070 g       .bss	00000000 end
08001eac  w    F .text	00000002 I2C1_EV_IRQHandler
08002030 g     O .text	0000000c BUTTON_PIN
08002060 g     O .text	00000008 COM_TX_PORT_CLK
0800129c g     F .text	000000ac RCC_GetClocksFreq
08001eac  w    F .text	00000002 DMA1_Channel6_IRQHandler
08001438 g     F .text	00000018 RCC_APB2PeriphClockLPModeCmd
08000f9c g     F .text	0000001e I2C_NACKPositionConfig
08001eac  w    F .text	00000002 UART4_IRQHandler
08001eac  w    F .text	00000002 DMA2_Channel4_IRQHandler
080018dc g     F .text	00000020 SYSCFG_RIChannelSpeedConfig
08000a78 g     F .text	00000010 EXTI_GenerateSWInterrupt
08001ad0 g     F .text	000000b8 USART_Init
20000000 g     O .data	00000010 GPIO_PORT
08001eac  w    F .text	00000002 TIM3_IRQHandler
08001eac  w    F .text	00000002 RCC_IRQHandler
20000040 g       .bss	00000000 _bss
08001eac  w    F .text	00000002 DMA1_Channel1_IRQHandler
08001eac g       .text	00000002 Default_Handler
08001cd4 g     F .text	0000001a USART_HalfDuplexCmd
08000a9c g     F .text	0000000c EXTI_ClearFlag
080010ac g     F .text	00000036 I2C_GetFlagStatus
08001038 g     F .text	0000001a I2C_DMALastTransferCmd
08001348 g     F .text	00000030 RCC_RTCCLKConfig
08000480 g     F .text	00000058 LM75_LowLevel_DeInit
08001eac  w    F .text	00000002 EXTI15_10_IRQHandler
08000198 g     F .text	0000001c STM_EVAL_LEDOff
08000f04 g     F .text	0000001e I2C_SMBusAlertConfig
08001d84 g     F .text	00000032 USART_ITConfig
080009f8 g     F .text	00000070 EXTI_Init
080016cc g     F .text	00000020 SPI_NSSInternalSoftwareConfig
08000cf4 g     F .text	0000003c I2C_DeInit
08000e2c g     F .text	0000001a I2C_Cmd
08000cac g     F .text	00000004 GPIO_ResetBits
08001eac  w    F .text	00000002 TIM7_IRQHandler
080010e4 g     F .text	00000008 I2C_ClearFlag
08001730 g     F .text	0000000c SPI_TransmitCRC
08001eac  w    F .text	00000002 TIM5_IRQHandler
08001d3c g     F .text	00000016 USART_IrDAConfig
08002000 g     O .text	00000010 GPIO_CLK
08000544 g     F .text	00000090 sEE_LowLevel_DeInit
08001eac  w    F .text	00000002 EXTI9_5_IRQHandler
0800119c g     F .text	00000014 RCC_MSIRangeConfig
08001eac  w    F .text	00000002 TIM9_IRQHandler
08001eac  w    F .text	00000002 TAMPER_STAMP_IRQHandler
08001eac  w    F .text	00000002 RTC_WKUP_IRQHandler
08001450 g     F .text	00000018 RCC_APB1PeriphClockLPModeCmd
08000f7c g     F .text	00000012 I2C_Send7bitAddress
08001a20 g     F .text	000000b0 USART_DeInit
0800164c g     F .text	0000000e I2S_StructInit
20000028 g     O .data	00000008 COM_TX_PORT
08000f5c g     F .text	0000001e I2C_FastModeDutyCycleConfig
08000aa8 g     F .text	00000014 EXTI_GetITStatus
08001eac  w    F .text	00000002 SPI2_IRQHandler
0800180c g     F .text	00000010 SYSCFG_GetBootMode
080003ac g     F .text	000000d4 SD_LowLevel_Init
08001800 g     F .text	0000000c SYSCFG_MemoryRemapConfig
08001fc4 g     F .text	00000002 MemManage_Handler
080011bc g     F .text	00000014 RCC_AdjustHSICalibrationValue
08001fd4 g     F .text	00000016 main
080017c0 g     F .text	00000010 SPI_I2S_ClearITPendingBit
08001b9c g     F .text	0000002a USART_ClockInit
080018bc g     F .text	00000020 SYSCFG_RIResistorConfig
08001fca g     F .text	00000002 SVC_Handler
08001eac  w    F .text	00000002 DMA2_Channel5_IRQHandler
08001cc8 g     F .text	0000000c USART_SendBreak
08001750 g     F .text	00000014 SPI_I2S_DMACmd
08001274 g     F .text	00000014 RCC_PCLK1Config
0800203c g     O .text	00000006 BUTTON_PIN_SOURCE
08000a68 g     F .text	0000000e EXTI_StructInit
08001eac  w    F .text	00000002 DMA1_Channel5_IRQHandler
08001eac  w    F .text	00000002 USB_LP_IRQHandler
08001eac  w    F .text	00000002 EXTI4_IRQHandler
20000030 g     O .data	00000008 COM_RX_PORT
08001288 g     F .text	00000014 RCC_PCLK2Config
08000ecc g     F .text	0000001a I2C_GeneralCallCmd
0800165c g     F .text	0000001a SPI_Cmd
08001dc4 g     F .text	00000008 USART_ClearFlag
08000ee8 g     F .text	0000001a I2C_SoftwareResetCmd
08001eb0 g     F .text	00000110 SystemInit
08000ac8 g     F .text	000000f4 GPIO_DeInit
080020b8 g     F .text	00000000 _fini
080005d4 g     F .text	00000104 sEE_LowLevel_Init
08001110 g     F .text	0000003c RCC_DeInit
08001934 g     F .text	0000001c SYSCFG_RISwitchControlModeCmd
08001eac  w    F .text	00000002 DMA1_Channel3_IRQHandler
08001eac  w    F .text	00000002 COMP_IRQHandler
08000798 g     F .text	00000018 NVIC_SystemLPConfig
08001eac  w    F .text	00000002 WWDG_IRQHandler
08001224 g     F .text	0000000c RCC_LSEClockSecuritySystemCmd
0800207c g     O .text	00000002 COM_TX_PIN_SOURCE
08001408 g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
0800096c g     F .text	00000012 DMA_ITConfig
080010ec g     F .text	0000001c I2C_GetITStatus
0800027c g     F .text	00000020 STM_EVAL_PBGetState
08001eac  w    F .text	00000002 TIM2_IRQHandler
08000f40 g     F .text	0000001a I2C_StretchClockCmd
08001c7c g     F .text	00000016 USART_WakeUpConfig
08000c50 g     F .text	0000000c GPIO_StructInit
08002068 g     O .text	00000008 COM_RX_PORT_CLK
080001b4 g     F .text	00000020 STM_EVAL_LEDToggle
0800204c g     O .text	0000000c BUTTON_EXTI_LINE
08001c38 g     F .text	00000008 USART_SendData
20002000 g       *ABS*	00000000 _estack
08001eac  w    F .text	00000002 DAC_IRQHandler
08001eac  w    F .text	00000002 EXTI1_IRQHandler
08001054 g     F .text	00000018 I2C_ReadRegister
08002080 g     O .text	00000002 COM_RX_AF
0800173c g     F .text	0000000c SPI_GetCRC
20000040 g       .data	00000000 _edata
08001c60 g     F .text	0000001a USART_ReceiverWakeUpCmd
08001384 g     F .text	0000000c RCC_RTCResetCmd
08001b88 g     F .text	00000014 USART_StructInit
08001eac  w    F .text	00000002 AES_IRQHandler
08001eac  w    F .text	00000002 TIM11_IRQHandler
0800032c g     F .text	00000080 SD_LowLevel_DeInit
08001eac  w    F .text	00000002 USART2_IRQHandler
08001838 g     F .text	0000002c SYSCFG_EXTILineConfig
08001d20 g     F .text	0000001a USART_SmartCardNACKCmd
08000000 g     O .isr_vector	00000000 g_pfnVectors
08001014 g     F .text	00000008 I2C_GetPEC
080011b0 g     F .text	0000000c RCC_MSICmd
08001cac g     F .text	0000001a USART_LINCmd
08001764 g     F .text	00000020 SPI_I2S_ITConfig
08001eac  w    F .text	00000002 I2C2_ER_IRQHandler
08001eac  w    F .text	00000002 DMA1_Channel2_IRQHandler
080004d8 g     F .text	0000006c LM75_LowLevel_Init
08000eb0 g     F .text	0000001a I2C_DualAddressCmd
08001fec g     F .text	00000014 TimingDelay_Decrement
0800099c g     F .text	00000014 DMA_ClearFlag
08002044 g     O .text	00000006 BUTTON_PORT_SOURCE
08001eac  w    F .text	00000002 FLASH_IRQHandler
20000038 g     O .data	00000008 COM_USART
08000c5c g     F .text	00000024 GPIO_PinLockConfig
08001fc6 g     F .text	00000002 BusFault_Handler
08001eac  w    F .text	00000002 USART1_IRQHandler
080011f0 g     F .text	0000000c RCC_LSICmd
08000e80 g     F .text	0000001a I2C_AcknowledgeConfig
08001eac  w    F .text	00000002 SPI3_IRQHandler
08001bc8 g     F .text	00000008 USART_ClockStructInit
08001080 g     F .text	0000001a I2C_CheckEvent
080013f0 g     F .text	00000018 RCC_APB2PeriphResetCmd
08000e64 g     F .text	0000001a I2C_GenerateSTOP
08001eac  w    F .text	00000002 I2C1_ER_IRQHandler
0800163c g     F .text	00000010 SPI_StructInit
0800153c g     F .text	00000054 SPI_Init
08000710 g     F .text	00000014 NVIC_PriorityGroupConfig
0800017c g     F .text	0000001c STM_EVAL_LEDOn
080007c8 g     F .text	00000128 DMA_DeInit
08001190 g     F .text	0000000c RCC_AdjustMSICalibrationValue
08001108 g     F .text	00000008 I2C_ClearITPendingBit
08002058 g     O .text	00000006 BUTTON_IRQn
08000c80 g     F .text	0000000c GPIO_ReadInputDataBit
08001d70 g     F .text	00000014 USART_DMACmd
08001590 g     F .text	000000ac I2S_Init
08001260 g     F .text	00000014 RCC_HCLKConfig
08001eac  w    F .text	00000002 DMA2_Channel3_IRQHandler



Disassembly of section .text:

0800013c <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800013c:	b570      	push	{r4, r5, r6, lr}
 800013e:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000140:	4d0c      	ldr	r5, [pc, #48]	@ (8000174 <STM_EVAL_LEDInit+0x38>)
{
 8000142:	b082      	sub	sp, #8
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000144:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8000148:	2101      	movs	r1, #1
 800014a:	f001 f921 	bl	8001390 <RCC_AHBPeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800014e:	f240 3301 	movw	r3, #769	@ 0x301
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000152:	4e09      	ldr	r6, [pc, #36]	@ (8000178 <STM_EVAL_LEDInit+0x3c>)
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000154:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 8000158:	8a2d      	ldrh	r5, [r5, #16]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800015a:	4669      	mov	r1, sp
 800015c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000160:	e9cd 5300 	strd	r5, r3, [sp]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000164:	f000 fd2a 	bl	8000bbc <GPIO_Init>
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000168:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800016c:	831d      	strh	r5, [r3, #24]
}
 800016e:	b002      	add	sp, #8
 8000170:	bd70      	pop	{r4, r5, r6, pc}
 8000172:	bf00      	nop
 8000174:	08002000 	.word	0x08002000
 8000178:	20000000 	.word	0x20000000

0800017c <STM_EVAL_LEDOn>:
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <STM_EVAL_LEDOn+0x14>)
 800017e:	4a05      	ldr	r2, [pc, #20]	@ (8000194 <STM_EVAL_LEDOn+0x18>)
 8000180:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8000184:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8000188:	8a1b      	ldrh	r3, [r3, #16]
 800018a:	8353      	strh	r3, [r2, #26]
}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	08002000 	.word	0x08002000
 8000194:	20000000 	.word	0x20000000

08000198 <STM_EVAL_LEDOff>:
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];  
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <STM_EVAL_LEDOff+0x14>)
 800019a:	4a05      	ldr	r2, [pc, #20]	@ (80001b0 <STM_EVAL_LEDOff+0x18>)
 800019c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80001a0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80001a4:	8a1b      	ldrh	r3, [r3, #16]
 80001a6:	8313      	strh	r3, [r2, #24]
}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	08002000 	.word	0x08002000
 80001b0:	20000000 	.word	0x20000000

080001b4 <STM_EVAL_LEDToggle>:
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80001b4:	4a05      	ldr	r2, [pc, #20]	@ (80001cc <STM_EVAL_LEDToggle+0x18>)
 80001b6:	4b06      	ldr	r3, [pc, #24]	@ (80001d0 <STM_EVAL_LEDToggle+0x1c>)
 80001b8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80001bc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80001c0:	8a91      	ldrh	r1, [r2, #20]
 80001c2:	8a1b      	ldrh	r3, [r3, #16]
 80001c4:	404b      	eors	r3, r1
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	8293      	strh	r3, [r2, #20]
}
 80001ca:	4770      	bx	lr
 80001cc:	20000000 	.word	0x20000000
 80001d0:	08002000 	.word	0x08002000

080001d4 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                     generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80001d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  NVIC_InitTypeDef NVIC_InitStructure;

  /* There is no Wakeup and Tamper buttons on STM32L152-EVAL. */
   
  /* Enable the BUTTON Clock */
  RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80001d8:	4e26      	ldr	r6, [pc, #152]	@ (8000274 <STM_EVAL_PBInit+0xa0>)
{
 80001da:	b086      	sub	sp, #24
  RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80001dc:	eb06 0380 	add.w	r3, r6, r0, lsl #2
{
 80001e0:	4604      	mov	r4, r0
 80001e2:	460d      	mov	r5, r1
  RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80001e4:	6998      	ldr	r0, [r3, #24]
 80001e6:	2101      	movs	r1, #1
 80001e8:	f001 f8d2 	bl	8001390 <RCC_AHBPeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80001ec:	2101      	movs	r1, #1

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80001ee:	2700      	movs	r7, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80001f0:	4608      	mov	r0, r1
 80001f2:	f001 f8d9 	bl	80013a8 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80001f6:	4b20      	ldr	r3, [pc, #128]	@ (8000278 <STM_EVAL_PBInit+0xa4>)
  RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80001f8:	ea4f 0884 	mov.w	r8, r4, lsl #2
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80001fc:	4443      	add	r3, r8
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80001fe:	eb06 0844 	add.w	r8, r6, r4, lsl #1
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000202:	6918      	ldr	r0, [r3, #16]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8000204:	f8b8 3030 	ldrh.w	r3, [r8, #48]	@ 0x30
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000208:	a902      	add	r1, sp, #8
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800020a:	f88d 700c 	strb.w	r7, [sp, #12]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800020e:	f88d 700f 	strb.w	r7, [sp, #15]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8000212:	9302      	str	r3, [sp, #8]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000214:	f000 fcd2 	bl	8000bbc <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8000218:	2d01      	cmp	r5, #1
 800021a:	d002      	beq.n	8000222 <STM_EVAL_PBInit+0x4e>
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
  }
}
 800021c:	b006      	add	sp, #24
 800021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000222:	4426      	add	r6, r4
 8000224:	f896 103c 	ldrb.w	r1, [r6, #60]	@ 0x3c
 8000228:	f896 0044 	ldrb.w	r0, [r6, #68]	@ 0x44
 800022c:	f001 fb04 	bl	8001838 <SYSCFG_EXTILineConfig>
      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
 8000230:	42bc      	cmp	r4, r7
 8000232:	bf0c      	ite	eq
 8000234:	2308      	moveq	r3, #8
 8000236:	230c      	movne	r3, #12
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8000238:	f8b8 204c 	ldrh.w	r2, [r8, #76]	@ 0x4c
    EXTI_Init(&EXTI_InitStructure);
 800023c:	a804      	add	r0, sp, #16
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800023e:	9204      	str	r2, [sp, #16]
    if(Button != BUTTON_KEY) 
 8000240:	f88d 3015 	strb.w	r3, [sp, #21]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000244:	f88d 7014 	strb.w	r7, [sp, #20]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000248:	f88d 5016 	strb.w	r5, [sp, #22]
    EXTI_Init(&EXTI_InitStructure);
 800024c:	f000 fbd4 	bl	80009f8 <EXTI_Init>
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000250:	220f      	movs	r2, #15
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000252:	f240 130f 	movw	r3, #271	@ 0x10f
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000256:	f896 1058 	ldrb.w	r1, [r6, #88]	@ 0x58
    NVIC_Init(&NVIC_InitStructure); 
 800025a:	a801      	add	r0, sp, #4
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800025c:	f88d 1004 	strb.w	r1, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000260:	f88d 2005 	strb.w	r2, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000264:	f8ad 3006 	strh.w	r3, [sp, #6]
    NVIC_Init(&NVIC_InitStructure); 
 8000268:	f000 fa5c 	bl	8000724 <NVIC_Init>
}
 800026c:	b006      	add	sp, #24
 800026e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000272:	bf00      	nop
 8000274:	08002000 	.word	0x08002000
 8000278:	20000000 	.word	0x20000000

0800027c <STM_EVAL_PBGetState>:
  *     @arg BUTTON_DOWN: Joystick Down Push Button
  *     @arg BUTTON_SEL: Joystick Sel Push Button    
  * @retval Button GPIO pin value is returned. 
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 800027c:	b508      	push	{r3, lr}
  /* There is no Wakeup and Tamper pins on STM32L152-EVAL. */
  
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800027e:	4a05      	ldr	r2, [pc, #20]	@ (8000294 <STM_EVAL_PBGetState+0x18>)
 8000280:	4b05      	ldr	r3, [pc, #20]	@ (8000298 <STM_EVAL_PBGetState+0x1c>)
 8000282:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8000286:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800028a:	8e11      	ldrh	r1, [r2, #48]	@ 0x30
 800028c:	6918      	ldr	r0, [r3, #16]
 800028e:	f000 fcf7 	bl	8000c80 <GPIO_ReadInputDataBit>
}
 8000292:	bd08      	pop	{r3, pc}
 8000294:	08002000 	.word	0x08002000
 8000298:	20000000 	.word	0x20000000

0800029c <STM_EVAL_COMInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
  *   contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 800029c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002a0:	4606      	mov	r6, r0
 80002a2:	4688      	mov	r8, r1
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_AHBPeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
 80002a4:	4d1e      	ldr	r5, [pc, #120]	@ (8000320 <STM_EVAL_COMInit+0x84>)
 80002a6:	ea4f 0980 	mov.w	r9, r0, lsl #2
 80002aa:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 80002ae:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80002b0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
{
 80002b2:	b083      	sub	sp, #12
  RCC_AHBPeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
 80002b4:	4318      	orrs	r0, r3
 80002b6:	2101      	movs	r1, #1
 80002b8:	f001 f86a 	bl	8001390 <RCC_AHBPeriphClockCmd>

  /* Enable UART clock */
  RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
 80002bc:	6f20      	ldr	r0, [r4, #112]	@ 0x70

  /* Connect PXx to USARTx_Tx */
  GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
 80002be:	4c19      	ldr	r4, [pc, #100]	@ (8000324 <STM_EVAL_COMInit+0x88>)
 80002c0:	19af      	adds	r7, r5, r6
 80002c2:	444c      	add	r4, r9
  RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
 80002c4:	2101      	movs	r1, #1
 80002c6:	f001 f87b 	bl	80013c0 <RCC_APB1PeriphClockCmd>
  GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
 80002ca:	f897 2078 	ldrb.w	r2, [r7, #120]	@ 0x78
 80002ce:	f897 107c 	ldrb.w	r1, [r7, #124]	@ 0x7c
 80002d2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80002d4:	f000 fcfa 	bl	8000ccc <GPIO_PinAFConfig>

  /* Connect PXx to USARTx_Rx */
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
  
  /* Configure USART Tx as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 80002d8:	eb05 0546 	add.w	r5, r5, r6, lsl #1
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
 80002dc:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80002e0:	f897 1084 	ldrb.w	r1, [r7, #132]	@ 0x84
 80002e4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80002e6:	f000 fcf1 	bl	8000ccc <GPIO_PinAFConfig>
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80002ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000328 <STM_EVAL_COMInit+0x8c>)
  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 80002ec:	f8b5 3088 	ldrh.w	r3, [r5, #136]	@ 0x88
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 80002f0:	4669      	mov	r1, sp
 80002f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 80002f4:	e9cd 3200 	strd	r3, r2, [sp]
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 80002f8:	f000 fc60 	bl	8000bbc <GPIO_Init>
    
  /* Configure USART Rx as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
 80002fc:	f8b5 308c 	ldrh.w	r3, [r5, #140]	@ 0x8c
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 8000300:	4669      	mov	r1, sp
 8000302:	6b20      	ldr	r0, [r4, #48]	@ 0x30
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
 8000304:	9300      	str	r3, [sp, #0]
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 8000306:	f000 fc59 	bl	8000bbc <GPIO_Init>

  /* USART configuration */
  USART_Init(COM_USART[COM], USART_InitStruct);
 800030a:	4641      	mov	r1, r8
 800030c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800030e:	f001 fbdf 	bl	8001ad0 <USART_Init>
    
  /* Enable USART */
  USART_Cmd(COM_USART[COM], ENABLE);
 8000312:	2101      	movs	r1, #1
 8000314:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8000316:	f001 fc5b 	bl	8001bd0 <USART_Cmd>
}
 800031a:	b003      	add	sp, #12
 800031c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000320:	08002000 	.word	0x08002000
 8000324:	20000000 	.word	0x20000000
 8000328:	01000302 	.word	0x01000302

0800032c <SD_LowLevel_DeInit>:
  * @brief  DeInitializes the SPI interface.
  * @param  None
  * @retval None
  */
void SD_LowLevel_DeInit(void)
{
 800032c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  SPI_Cmd(SD_SPI, DISABLE); /*!< SD_SPI disable */
 800032e:	4c1c      	ldr	r4, [pc, #112]	@ (80003a0 <SD_LowLevel_DeInit+0x74>)
{
 8000330:	b082      	sub	sp, #8
  SPI_Cmd(SD_SPI, DISABLE); /*!< SD_SPI disable */
 8000332:	2100      	movs	r1, #0
 8000334:	4620      	mov	r0, r4
 8000336:	f001 f991 	bl	800165c <SPI_Cmd>
  SPI_DeInit(SD_SPI);   /*!< DeInitializes the SD_SPI */
 800033a:	4620      	mov	r0, r4
 800033c:	f001 f8c8 	bl	80014d0 <SPI_I2S_DeInit>
  
  /*!< SD_SPI Periph clock disable */
  RCC_APB1PeriphClockCmd(SD_SPI_CLK, DISABLE); 
 8000340:	2100      	movs	r1, #0
 8000342:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000346:	f001 f83b 	bl	80013c0 <RCC_APB1PeriphClockCmd>

  /*!< Configure SD_SPI pins: SCK */
  GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
 800034a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800034e:	2300      	movs	r3, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8000350:	f504 34e6 	add.w	r4, r4, #117760	@ 0x1cc00
 8000354:	4620      	mov	r0, r4
 8000356:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
 8000358:	9200      	str	r2, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800035a:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800035e:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8000362:	f000 fc2b 	bl	8000bbc <GPIO_Init>

  /*!< Configure SD_SPI pins: MISO */
  GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
 8000366:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800036a:	4669      	mov	r1, sp
 800036c:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
 800036e:	9300      	str	r3, [sp, #0]
  GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8000370:	f000 fc24 	bl	8000bbc <GPIO_Init>

  /*!< Configure SD_SPI pins: MOSI */
  GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
 8000374:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8000378:	4669      	mov	r1, sp
 800037a:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
 800037c:	9300      	str	r3, [sp, #0]
  GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800037e:	f000 fc1d 	bl	8000bbc <GPIO_Init>

  /*!< Configure SD_SPI_CS_PIN pin: SD Card CS pin */
  GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
 8000382:	2380      	movs	r3, #128	@ 0x80
  GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
 8000384:	4669      	mov	r1, sp
 8000386:	4807      	ldr	r0, [pc, #28]	@ (80003a4 <SD_LowLevel_DeInit+0x78>)
  GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
 8000388:	9300      	str	r3, [sp, #0]
  GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
 800038a:	f000 fc17 	bl	8000bbc <GPIO_Init>

  /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 800038e:	2340      	movs	r3, #64	@ 0x40
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 8000390:	4669      	mov	r1, sp
 8000392:	4805      	ldr	r0, [pc, #20]	@ (80003a8 <SD_LowLevel_DeInit+0x7c>)
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 8000394:	9300      	str	r3, [sp, #0]
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 8000396:	f000 fc11 	bl	8000bbc <GPIO_Init>
}
 800039a:	b002      	add	sp, #8
 800039c:	bd10      	pop	{r4, pc}
 800039e:	bf00      	nop
 80003a0:	40003800 	.word	0x40003800
 80003a4:	40020c00 	.word	0x40020c00
 80003a8:	40021000 	.word	0x40021000

080003ac <SD_LowLevel_Init>:
  *         data transfer).
  * @param  None
  * @retval None
  */
void SD_LowLevel_Init(void)
{
 80003ac:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  SPI_InitTypeDef   SPI_InitStructure;

  /*!< SD_SPI_CS_GPIO, SD_SPI_MOSI_GPIO, SD_SPI_MISO_GPIO, SD_SPI_DETECT_GPIO 
       and SD_SPI_SCK_GPIO Periph clock enable */
  RCC_AHBPeriphClockCmd(SD_CS_GPIO_CLK | SD_SPI_MOSI_GPIO_CLK | SD_SPI_MISO_GPIO_CLK |
 80003ae:	2101      	movs	r1, #1
{
 80003b0:	b088      	sub	sp, #32
  RCC_AHBPeriphClockCmd(SD_CS_GPIO_CLK | SD_SPI_MOSI_GPIO_CLK | SD_SPI_MISO_GPIO_CLK |
 80003b2:	201a      	movs	r0, #26
 80003b4:	f000 ffec 	bl	8001390 <RCC_AHBPeriphClockCmd>
                        SD_SPI_SCK_GPIO_CLK | SD_DETECT_GPIO_CLK, ENABLE);

  /*!< SD_SPI Periph clock enable */
  RCC_APB1PeriphClockCmd(SD_SPI_CLK, ENABLE); 
 80003b8:	2101      	movs	r1, #1
 80003ba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80003be:	f000 ffff 	bl	80013c0 <RCC_APB1PeriphClockCmd>

  /*!< Configure SD_SPI pins: SCK */
  GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
 80003c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
  GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80003c6:	4c28      	ldr	r4, [pc, #160]	@ (8000468 <SD_LowLevel_Init+0xbc>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80003c8:	4b28      	ldr	r3, [pc, #160]	@ (800046c <SD_LowLevel_Init+0xc0>)
  GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80003ca:	4620      	mov	r0, r4
 80003cc:	a901      	add	r1, sp, #4
  GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
 80003ce:	9201      	str	r2, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80003d0:	9302      	str	r3, [sp, #8]
  GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80003d2:	f000 fbf3 	bl	8000bbc <GPIO_Init>

  /*!< Configure SD_SPI pins: MISO */
  GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
 80003d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80003da:	4620      	mov	r0, r4
 80003dc:	a901      	add	r1, sp, #4
  GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
 80003de:	9301      	str	r3, [sp, #4]
  GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80003e0:	f000 fbec 	bl	8000bbc <GPIO_Init>

  /*!< Configure SD_SPI pins: MOSI */
  GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
 80003e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80003e8:	4620      	mov	r0, r4
 80003ea:	a901      	add	r1, sp, #4
  GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
 80003ec:	9301      	str	r3, [sp, #4]
  GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80003ee:	f000 fbe5 	bl	8000bbc <GPIO_Init>

  /*!< Configure SD_SPI_CS_PIN pin: SD Card CS pin */
  GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
 80003f2:	2280      	movs	r2, #128	@ 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80003f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000470 <SD_LowLevel_Init+0xc4>)
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
  GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
 80003f6:	a901      	add	r1, sp, #4
 80003f8:	481e      	ldr	r0, [pc, #120]	@ (8000474 <SD_LowLevel_Init+0xc8>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80003fa:	e9cd 2301 	strd	r2, r3, [sp, #4]

  /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80003fe:	2600      	movs	r6, #0
  GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
 8000400:	f000 fbdc 	bl	8000bbc <GPIO_Init>
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000404:	2501      	movs	r5, #1
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 8000406:	2340      	movs	r3, #64	@ 0x40
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 8000408:	a901      	add	r1, sp, #4
 800040a:	481b      	ldr	r0, [pc, #108]	@ (8000478 <SD_LowLevel_Init+0xcc>)
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 800040c:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800040e:	f88d 6008 	strb.w	r6, [sp, #8]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000412:	f88d 500b 	strb.w	r5, [sp, #11]
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 8000416:	f000 fbd1 	bl	8000bbc <GPIO_Init>

  /* Connect PXx to SD_SPI_SCK */
  GPIO_PinAFConfig(SD_SPI_SCK_GPIO_PORT, SD_SPI_SCK_SOURCE, SD_SPI_SCK_AF);
 800041a:	4620      	mov	r0, r4
 800041c:	2205      	movs	r2, #5
 800041e:	210d      	movs	r1, #13
 8000420:	f000 fc54 	bl	8000ccc <GPIO_PinAFConfig>

  /* Connect PXx to SD_SPI_MISO */
  GPIO_PinAFConfig(SD_SPI_MISO_GPIO_PORT, SD_SPI_MISO_SOURCE, SD_SPI_MISO_AF); 
 8000424:	4620      	mov	r0, r4
 8000426:	2205      	movs	r2, #5
 8000428:	210e      	movs	r1, #14
 800042a:	f000 fc4f 	bl	8000ccc <GPIO_PinAFConfig>

  /* Connect PXx to SD_SPI_MOSI */
  GPIO_PinAFConfig(SD_SPI_MOSI_GPIO_PORT, SD_SPI_MOSI_SOURCE, SD_SPI_MOSI_AF);  
 800042e:	4620      	mov	r0, r4
 8000430:	2205      	movs	r2, #5
 8000432:	210f      	movs	r1, #15
 8000434:	f000 fc4a 	bl	8000ccc <GPIO_PinAFConfig>
  
  /*!< SD_SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000438:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800043c:	f04f 7182 	mov.w	r1, #17039360	@ 0x1040000
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;

  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000440:	2307      	movs	r3, #7
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000442:	480e      	ldr	r0, [pc, #56]	@ (800047c <SD_LowLevel_Init+0xd0>)
  SPI_Init(SD_SPI, &SPI_InitStructure);
 8000444:	f5a4 34e6 	sub.w	r4, r4, #117760	@ 0x1cc00
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000448:	e9cd 1203 	strd	r1, r2, [sp, #12]
 800044c:	e9cd 0605 	strd	r0, r6, [sp, #20]
  SPI_Init(SD_SPI, &SPI_InitStructure);
 8000450:	a903      	add	r1, sp, #12
 8000452:	4620      	mov	r0, r4
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000454:	f8ad 301c 	strh.w	r3, [sp, #28]
  SPI_Init(SD_SPI, &SPI_InitStructure);
 8000458:	f001 f870 	bl	800153c <SPI_Init>
  
  SPI_Cmd(SD_SPI, ENABLE); /*!< SD_SPI enable */
 800045c:	4629      	mov	r1, r5
 800045e:	4620      	mov	r0, r4
 8000460:	f001 f8fc 	bl	800165c <SPI_Cmd>
}
 8000464:	b008      	add	sp, #32
 8000466:	bd70      	pop	{r4, r5, r6, pc}
 8000468:	40020400 	.word	0x40020400
 800046c:	01000302 	.word	0x01000302
 8000470:	01000301 	.word	0x01000301
 8000474:	40020c00 	.word	0x40020c00
 8000478:	40021000 	.word	0x40021000
 800047c:	02000001 	.word	0x02000001

08000480 <LM75_LowLevel_DeInit>:
  * @brief  DeInitializes the LM75_I2C.
  * @param  None
  * @retval None
  */
void LM75_LowLevel_DeInit(void)
{ 
 8000480:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;

  /*!< Disable LM75_I2C */
  I2C_Cmd(LM75_I2C, DISABLE);
 8000482:	4c14      	ldr	r4, [pc, #80]	@ (80004d4 <LM75_LowLevel_DeInit+0x54>)
{ 
 8000484:	b082      	sub	sp, #8
  I2C_Cmd(LM75_I2C, DISABLE);
 8000486:	2100      	movs	r1, #0
 8000488:	4620      	mov	r0, r4
 800048a:	f000 fccf 	bl	8000e2c <I2C_Cmd>
  
  /*!< DeInitializes the LM75_I2C */
  I2C_DeInit(LM75_I2C);
 800048e:	4620      	mov	r0, r4
 8000490:	f000 fc30 	bl	8000cf4 <I2C_DeInit>
  
  /*!< LM75_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(LM75_I2C_CLK, DISABLE);
 8000494:	2100      	movs	r1, #0
 8000496:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800049a:	f000 ff91 	bl	80013c0 <RCC_APB1PeriphClockCmd>
    
  /*!< Configure LM75_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
 800049e:	2240      	movs	r2, #64	@ 0x40
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80004a0:	2300      	movs	r3, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 80004a2:	f504 34d8 	add.w	r4, r4, #110592	@ 0x1b000
 80004a6:	4620      	mov	r0, r4
 80004a8:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
 80004aa:	9200      	str	r2, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80004ac:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80004b0:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 80004b4:	f000 fb82 	bl	8000bbc <GPIO_Init>

  /*!< Configure LM75_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
 80004b8:	2380      	movs	r3, #128	@ 0x80
  GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 80004ba:	4669      	mov	r1, sp
 80004bc:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
 80004be:	9300      	str	r3, [sp, #0]
  GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 80004c0:	f000 fb7c 	bl	8000bbc <GPIO_Init>

  /*!< Configure LM75_I2C pin: SMBUS ALERT */
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
 80004c4:	2320      	movs	r3, #32
  GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
 80004c6:	4669      	mov	r1, sp
 80004c8:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
 80004ca:	9300      	str	r3, [sp, #0]
  GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
 80004cc:	f000 fb76 	bl	8000bbc <GPIO_Init>
}
 80004d0:	b002      	add	sp, #8
 80004d2:	bd10      	pop	{r4, pc}
 80004d4:	40005400 	.word	0x40005400

080004d8 <LM75_LowLevel_Init>:
  * @brief  Initializes the LM75_I2C.
  * @param  None
  * @retval None
  */
void LM75_LowLevel_Init(void)
{ 
 80004d8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;

  /*!< LM75_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(LM75_I2C_CLK, ENABLE);
 80004da:	2101      	movs	r1, #1
{ 
 80004dc:	b082      	sub	sp, #8
       and LM75_I2C_SMBUSALERT_GPIO_CLK Periph clock enable */
  RCC_AHBPeriphClockCmd(LM75_I2C_SCL_GPIO_CLK | LM75_I2C_SDA_GPIO_CLK |
                        LM75_I2C_SMBUSALERT_GPIO_CLK, ENABLE);

  /* Connect PXx to I2C_SCL */
  GPIO_PinAFConfig(LM75_I2C_SCL_GPIO_PORT, LM75_I2C_SCL_SOURCE, LM75_I2C_SCL_AF);
 80004de:	4c17      	ldr	r4, [pc, #92]	@ (800053c <LM75_LowLevel_Init+0x64>)
  RCC_APB1PeriphClockCmd(LM75_I2C_CLK, ENABLE);
 80004e0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80004e4:	f000 ff6c 	bl	80013c0 <RCC_APB1PeriphClockCmd>
  RCC_AHBPeriphClockCmd(LM75_I2C_SCL_GPIO_CLK | LM75_I2C_SDA_GPIO_CLK |
 80004e8:	2101      	movs	r1, #1
 80004ea:	2002      	movs	r0, #2
 80004ec:	f000 ff50 	bl	8001390 <RCC_AHBPeriphClockCmd>
  GPIO_PinAFConfig(LM75_I2C_SCL_GPIO_PORT, LM75_I2C_SCL_SOURCE, LM75_I2C_SCL_AF);
 80004f0:	4620      	mov	r0, r4
 80004f2:	2204      	movs	r2, #4
 80004f4:	2106      	movs	r1, #6
 80004f6:	f000 fbe9 	bl	8000ccc <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA */
  GPIO_PinAFConfig(LM75_I2C_SDA_GPIO_PORT, LM75_I2C_SDA_SOURCE, LM75_I2C_SDA_AF); 
 80004fa:	4620      	mov	r0, r4
 80004fc:	2204      	movs	r2, #4
 80004fe:	2107      	movs	r1, #7
 8000500:	f000 fbe4 	bl	8000ccc <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SMBUSALER */
  GPIO_PinAFConfig(LM75_I2C_SMBUSALERT_GPIO_PORT, LM75_I2C_SMBUSALERT_SOURCE, LM75_I2C_SMBUSALERT_AF);   
 8000504:	4620      	mov	r0, r4
 8000506:	2204      	movs	r2, #4
 8000508:	2105      	movs	r1, #5
 800050a:	f000 fbdf 	bl	8000ccc <GPIO_PinAFConfig>
   
  /*!< Configure LM75_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
 800050e:	2240      	movs	r2, #64	@ 0x40
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <LM75_LowLevel_Init+0x68>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8000512:	4669      	mov	r1, sp
 8000514:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000516:	e9cd 2300 	strd	r2, r3, [sp]
  GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800051a:	f000 fb4f 	bl	8000bbc <GPIO_Init>

  /*!< Configure LM75_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
 800051e:	2380      	movs	r3, #128	@ 0x80
  GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8000520:	4669      	mov	r1, sp
 8000522:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
 8000524:	9300      	str	r3, [sp, #0]
  GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8000526:	f000 fb49 	bl	8000bbc <GPIO_Init>

  /*!< Configure LM75_I2C pin: SMBUS ALERT */
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
 800052a:	2320      	movs	r3, #32
  GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
 800052c:	4669      	mov	r1, sp
 800052e:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
 8000530:	9300      	str	r3, [sp, #0]
  GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
 8000532:	f000 fb43 	bl	8000bbc <GPIO_Init>
}
 8000536:	b002      	add	sp, #8
 8000538:	bd10      	pop	{r4, pc}
 800053a:	bf00      	nop
 800053c:	40020400 	.word	0x40020400
 8000540:	00010302 	.word	0x00010302

08000544 <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 8000544:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStructure; 
  NVIC_InitTypeDef NVIC_InitStructure;    
     
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 8000546:	4c20      	ldr	r4, [pc, #128]	@ (80005c8 <sEE_LowLevel_DeInit+0x84>)
{
 8000548:	b084      	sub	sp, #16
  I2C_Cmd(sEE_I2C, DISABLE);
 800054a:	2100      	movs	r1, #0
 800054c:	4620      	mov	r0, r4
 800054e:	f000 fc6d 	bl	8000e2c <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 8000552:	4620      	mov	r0, r4
 8000554:	f000 fbce 	bl	8000cf4 <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 8000558:	2100      	movs	r1, #0
 800055a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800055e:	f000 ff2f 	bl	80013c0 <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000562:	2400      	movs	r4, #0
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 8000564:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8000566:	4d19      	ldr	r5, [pc, #100]	@ (80005cc <sEE_LowLevel_DeInit+0x88>)
 8000568:	a902      	add	r1, sp, #8
 800056a:	4628      	mov	r0, r5
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 800056c:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800056e:	f88d 400c 	strb.w	r4, [sp, #12]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000572:	f88d 400f 	strb.w	r4, [sp, #15]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8000576:	f000 fb21 	bl	8000bbc <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800057a:	2380      	movs	r3, #128	@ 0x80
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800057c:	a902      	add	r1, sp, #8
 800057e:	4628      	mov	r0, r5
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8000580:	9302      	str	r3, [sp, #8]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8000582:	f000 fb1b 	bl	8000bbc <GPIO_Init>
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8000586:	2310      	movs	r3, #16
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
  NVIC_Init(&NVIC_InitStructure);
 8000588:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800058a:	9301      	str	r3, [sp, #4]
  NVIC_Init(&NVIC_InitStructure);
 800058c:	f000 f8ca 	bl	8000724 <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8000590:	2311      	movs	r3, #17
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_Init(&NVIC_InitStructure);   
  
  /* Disable and Deinitialize the DMA channels */
  DMA_Cmd(sEE_I2C_DMA_CHANNEL_TX, DISABLE);
 8000592:	4e0f      	ldr	r6, [pc, #60]	@ (80005d0 <sEE_LowLevel_DeInit+0x8c>)
  NVIC_Init(&NVIC_InitStructure);   
 8000594:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8000596:	f8ad 3004 	strh.w	r3, [sp, #4]
  DMA_Cmd(sEE_I2C_DMA_CHANNEL_RX, DISABLE);
 800059a:	f505 45b9 	add.w	r5, r5, #23680	@ 0x5c80
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800059e:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_Init(&NVIC_InitStructure);   
 80005a2:	f000 f8bf 	bl	8000724 <NVIC_Init>
  DMA_Cmd(sEE_I2C_DMA_CHANNEL_TX, DISABLE);
 80005a6:	4630      	mov	r0, r6
 80005a8:	4621      	mov	r1, r4
 80005aa:	f000 f9cd 	bl	8000948 <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_CHANNEL_RX, DISABLE);
 80005ae:	4621      	mov	r1, r4
 80005b0:	4628      	mov	r0, r5
 80005b2:	f000 f9c9 	bl	8000948 <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_CHANNEL_TX);
 80005b6:	4630      	mov	r0, r6
 80005b8:	f000 f906 	bl	80007c8 <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_CHANNEL_RX);
 80005bc:	4628      	mov	r0, r5
 80005be:	f000 f903 	bl	80007c8 <DMA_DeInit>
}
 80005c2:	b004      	add	sp, #16
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
 80005c6:	bf00      	nop
 80005c8:	40005400 	.word	0x40005400
 80005cc:	40020400 	.word	0x40020400
 80005d0:	4002606c 	.word	0x4002606c

080005d4 <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;  
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 80005d6:	2101      	movs	r1, #1
{
 80005d8:	b085      	sub	sp, #20
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 80005da:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80005de:	f000 feef 	bl	80013c0 <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHBPeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 80005e2:	2101      	movs	r1, #1
 80005e4:	2002      	movs	r0, #2
 80005e6:	f000 fed3 	bl	8001390 <RCC_AHBPeriphClockCmd>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80005ea:	2101      	movs	r1, #1
 80005ec:	4608      	mov	r0, r1
 80005ee:	f000 fedb 	bl	80013a8 <RCC_APB2PeriphClockCmd>
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
    
  /*!< GPIO configuration */  
  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 80005f2:	4c32      	ldr	r4, [pc, #200]	@ (80006bc <sEE_LowLevel_Init+0xe8>)
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);
 80005f4:	2101      	movs	r1, #1
 80005f6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80005fa:	f000 ff05 	bl	8001408 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 80005fe:	2100      	movs	r1, #0
 8000600:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000604:	f000 ff00 	bl	8001408 <RCC_APB1PeriphResetCmd>
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 8000608:	4620      	mov	r0, r4
 800060a:	2204      	movs	r2, #4
 800060c:	2106      	movs	r1, #6
 800060e:	f000 fb5d 	bl	8000ccc <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 8000612:	4620      	mov	r0, r4
 8000614:	2204      	movs	r2, #4
 8000616:	2107      	movs	r1, #7
 8000618:	f000 fb58 	bl	8000ccc <GPIO_PinAFConfig>

  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 800061c:	2240      	movs	r2, #64	@ 0x40
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800061e:	2780      	movs	r7, #128	@ 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <sEE_LowLevel_Init+0xec>)
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8000622:	4620      	mov	r0, r4
 8000624:	a902      	add	r1, sp, #8
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000626:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800062a:	f000 fac7 	bl	8000bbc <GPIO_Init>
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800062e:	a902      	add	r1, sp, #8
 8000630:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8000632:	9702      	str	r7, [sp, #8]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8000634:	f000 fac2 	bl	8000bbc <GPIO_Init>


  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <sEE_LowLevel_Init+0xf0>)
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 800063a:	a801      	add	r0, sp, #4

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800063c:	2500      	movs	r5, #0
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800063e:	9301      	str	r3, [sp, #4]
  NVIC_Init(&NVIC_InitStructure);
 8000640:	f000 f870 	bl	8000724 <NVIC_Init>
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8000644:	2311      	movs	r3, #17
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHBPeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);

  /* I2C TX DMA Channel configuration */
  DMA_DeInit(sEE_I2C_DMA_CHANNEL_TX);
 8000646:	4e20      	ldr	r6, [pc, #128]	@ (80006c8 <sEE_LowLevel_Init+0xf4>)
  NVIC_Init(&NVIC_InitStructure);  
 8000648:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 800064a:	f8ad 3004 	strh.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800064e:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_Init(&NVIC_InitStructure);  
 8000652:	f000 f867 	bl	8000724 <NVIC_Init>
  RCC_AHBPeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 8000656:	2101      	movs	r1, #1
 8000658:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800065c:	f000 fe98 	bl	8001390 <RCC_AHBPeriphClockCmd>
  DMA_DeInit(sEE_I2C_DMA_CHANNEL_TX);
 8000660:	4630      	mov	r0, r6
 8000662:	f000 f8b1 	bl	80007c8 <DMA_DeInit>
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 8000666:	4c19      	ldr	r4, [pc, #100]	@ (80006cc <sEE_LowLevel_Init+0xf8>)
 8000668:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <sEE_LowLevel_Init+0xfc>)
  sEEDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)0;   /* This parameter will be configured durig communication */
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;    /* This parameter will be configured durig communication */
 800066a:	2210      	movs	r2, #16
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 800066c:	6023      	str	r3, [r4, #0]
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;            /* This parameter will be configured durig communication */
 800066e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000672:	60e3      	str	r3, [r4, #12]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_MemoryDataSize_Byte;
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8000674:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;    /* This parameter will be configured durig communication */
 8000678:	e9c4 5201 	strd	r5, r2, [r4, #4]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800067c:	e9c4 5506 	strd	r5, r5, [r4, #24]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000680:	6125      	str	r5, [r4, #16]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8000682:	6225      	str	r5, [r4, #32]
  sEEDMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000684:	62a5      	str	r5, [r4, #40]	@ 0x28
  DMA_Init(sEE_I2C_DMA_CHANNEL_TX, &sEEDMA_InitStructure);  
  
  /* I2C RX DMA Channel configuration */
  DMA_DeInit(sEE_I2C_DMA_CHANNEL_RX);
 8000686:	4d13      	ldr	r5, [pc, #76]	@ (80006d4 <sEE_LowLevel_Init+0x100>)
  DMA_Init(sEE_I2C_DMA_CHANNEL_TX, &sEEDMA_InitStructure);  
 8000688:	4621      	mov	r1, r4
 800068a:	4630      	mov	r0, r6
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800068c:	6263      	str	r3, [r4, #36]	@ 0x24
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800068e:	6167      	str	r7, [r4, #20]
  DMA_Init(sEE_I2C_DMA_CHANNEL_TX, &sEEDMA_InitStructure);  
 8000690:	f000 f92e 	bl	80008f0 <DMA_Init>
  DMA_DeInit(sEE_I2C_DMA_CHANNEL_RX);
 8000694:	4628      	mov	r0, r5
 8000696:	f000 f897 	bl	80007c8 <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_CHANNEL_RX, &sEEDMA_InitStructure);  
 800069a:	4621      	mov	r1, r4
 800069c:	4628      	mov	r0, r5
 800069e:	f000 f927 	bl	80008f0 <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_CHANNEL_TX, DMA_IT_TC, ENABLE);
 80006a2:	4630      	mov	r0, r6
 80006a4:	2201      	movs	r2, #1
 80006a6:	2102      	movs	r1, #2
 80006a8:	f000 f960 	bl	800096c <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_CHANNEL_RX, DMA_IT_TC, ENABLE);    
 80006ac:	2201      	movs	r2, #1
 80006ae:	2102      	movs	r1, #2
 80006b0:	4628      	mov	r0, r5
 80006b2:	f000 f95b 	bl	800096c <DMA_ITConfig>
}
 80006b6:	b005      	add	sp, #20
 80006b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40020400 	.word	0x40020400
 80006c0:	00010302 	.word	0x00010302
 80006c4:	01000010 	.word	0x01000010
 80006c8:	4002606c 	.word	0x4002606c
 80006cc:	20000040 	.word	0x20000040
 80006d0:	40005410 	.word	0x40005410
 80006d4:	40026080 	.word	0x40026080

080006d8 <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 80006d8:	b410      	push	{r4}
 80006da:	460b      	mov	r3, r1
 80006dc:	4604      	mov	r4, r0
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 80006de:	b942      	cbnz	r2, 80006f2 <sEE_LowLevel_DMAConfig+0x1a>
  {
    /* Configure the DMA Tx Channel with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;    
 80006e0:	2210      	movs	r2, #16
    sEEDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
 80006e2:	4908      	ldr	r1, [pc, #32]	@ (8000704 <sEE_LowLevel_DMAConfig+0x2c>)
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
    DMA_Init(sEE_I2C_DMA_CHANNEL_TX, &sEEDMA_InitStructure);  
 80006e4:	4808      	ldr	r0, [pc, #32]	@ (8000708 <sEE_LowLevel_DMAConfig+0x30>)
  }
  else
  { 
    /* Configure the DMA Rx Channel with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
 80006e6:	604c      	str	r4, [r1, #4]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
    DMA_Init(sEE_I2C_DMA_CHANNEL_RX, &sEEDMA_InitStructure);    
  }
}
 80006e8:	bc10      	pop	{r4}
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 80006ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DMA_Init(sEE_I2C_DMA_CHANNEL_RX, &sEEDMA_InitStructure);    
 80006ee:	f000 b8ff 	b.w	80008f0 <DMA_Init>
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 80006f2:	2200      	movs	r2, #0
    sEEDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
 80006f4:	4903      	ldr	r1, [pc, #12]	@ (8000704 <sEE_LowLevel_DMAConfig+0x2c>)
    DMA_Init(sEE_I2C_DMA_CHANNEL_RX, &sEEDMA_InitStructure);    
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <sEE_LowLevel_DMAConfig+0x34>)
    sEEDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
 80006f8:	604c      	str	r4, [r1, #4]
}
 80006fa:	bc10      	pop	{r4}
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 80006fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DMA_Init(sEE_I2C_DMA_CHANNEL_RX, &sEEDMA_InitStructure);    
 8000700:	f000 b8f6 	b.w	80008f0 <DMA_Init>
 8000704:	20000040 	.word	0x20000040
 8000708:	4002606c 	.word	0x4002606c
 800070c:	40026080 	.word	0x40026080

08000710 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <NVIC_PriorityGroupConfig+0x10>)
 8000712:	f040 60bf 	orr.w	r0, r0, #100139008	@ 0x5f80000
 8000716:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800071a:	60d8      	str	r0, [r3, #12]
}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000724:	b530      	push	{r4, r5, lr}
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000726:	2401      	movs	r4, #1
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000728:	7801      	ldrb	r1, [r0, #0]
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800072a:	78c3      	ldrb	r3, [r0, #3]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800072c:	f001 021f 	and.w	r2, r1, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000730:	ea4f 1c51 	mov.w	ip, r1, lsr #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000734:	4094      	lsls	r4, r2
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000736:	b1d3      	cbz	r3, 800076e <NVIC_Init+0x4a>
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <NVIC_Init+0x58>)
    tmpsub = tmpsub >> tmppriority;
 800073a:	250f      	movs	r5, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800073c:	68db      	ldr	r3, [r3, #12]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800073e:	f890 e001 	ldrb.w	lr, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000742:	43db      	mvns	r3, r3
 8000744:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmpsub = tmpsub >> tmppriority;
 8000748:	411d      	asrs	r5, r3
    tmppre = (0x4 - tmppriority);
 800074a:	f1c3 0304 	rsb	r3, r3, #4
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800074e:	7882      	ldrb	r2, [r0, #2]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000750:	b2db      	uxtb	r3, r3
 8000752:	fa0e f303 	lsl.w	r3, lr, r3
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000756:	402a      	ands	r2, r5
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000758:	b2db      	uxtb	r3, r3
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800075a:	4809      	ldr	r0, [pc, #36]	@ (8000780 <NVIC_Init+0x5c>)
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800075c:	4313      	orrs	r3, r2
    tmppriority = tmppriority << 0x04;
 800075e:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000760:	4401      	add	r1, r0
    tmppriority = tmppriority << 0x04;
 8000762:	b2db      	uxtb	r3, r3
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000764:	f881 3300 	strb.w	r3, [r1, #768]	@ 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000768:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800076c:	bd30      	pop	{r4, r5, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800076e:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <NVIC_Init+0x5c>)
 8000770:	f10c 0c20 	add.w	ip, ip, #32
 8000774:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
}
 8000778:	bd30      	pop	{r4, r5, pc}
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	e000e100 	.word	0xe000e100

08000784 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000784:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
 8000788:	4b02      	ldr	r3, [pc, #8]	@ (8000794 <NVIC_SetVectorTable+0x10>)
 800078a:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800078e:	4301      	orrs	r1, r0
 8000790:	6099      	str	r1, [r3, #8]
}
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000798:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <NVIC_SystemLPConfig+0x14>)
 800079a:	6913      	ldr	r3, [r2, #16]
  if (NewState != DISABLE)
 800079c:	b111      	cbz	r1, 80007a4 <NVIC_SystemLPConfig+0xc>
    SCB->SCR |= LowPowerMode;
 800079e:	4303      	orrs	r3, r0
 80007a0:	6113      	str	r3, [r2, #16]
 80007a2:	4770      	bx	lr
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80007a4:	ea23 0300 	bic.w	r3, r3, r0
 80007a8:	6113      	str	r3, [r2, #16]
  }
}
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <SysTick_CLKSourceConfig>:
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80007b0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80007b4:	6913      	ldr	r3, [r2, #16]
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80007b6:	2804      	cmp	r0, #4
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80007b8:	bf0c      	ite	eq
 80007ba:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80007be:	f023 0304 	bicne.w	r3, r3, #4
 80007c2:	6113      	str	r3, [r2, #16]
  }
}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80007c8:	f64f 7cfe 	movw	ip, #65534	@ 0xfffe

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80007cc:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80007ce:	6802      	ldr	r2, [r0, #0]
  DMAy_Channelx->CPAR  = 0;
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
  
  if (DMAy_Channelx == DMA1_Channel1)
 80007d0:	4939      	ldr	r1, [pc, #228]	@ (80008b8 <DMA_DeInit+0xf0>)
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80007d2:	ea02 020c 	and.w	r2, r2, ip
  if (DMAy_Channelx == DMA1_Channel1)
 80007d6:	4288      	cmp	r0, r1
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80007d8:	6002      	str	r2, [r0, #0]
  DMAy_Channelx->CCR  = 0;
 80007da:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CNDTR = 0;
 80007dc:	6043      	str	r3, [r0, #4]
  DMAy_Channelx->CPAR  = 0;
 80007de:	6083      	str	r3, [r0, #8]
  DMAy_Channelx->CMAR = 0;
 80007e0:	60c3      	str	r3, [r0, #12]
  if (DMAy_Channelx == DMA1_Channel1)
 80007e2:	d027      	beq.n	8000834 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 80007e4:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <DMA_DeInit+0xf4>)
 80007e6:	4298      	cmp	r0, r3
 80007e8:	d01e      	beq.n	8000828 <DMA_DeInit+0x60>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 80007ea:	4b35      	ldr	r3, [pc, #212]	@ (80008c0 <DMA_DeInit+0xf8>)
 80007ec:	4298      	cmp	r0, r3
 80007ee:	d02d      	beq.n	800084c <DMA_DeInit+0x84>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 80007f0:	4b34      	ldr	r3, [pc, #208]	@ (80008c4 <DMA_DeInit+0xfc>)
 80007f2:	4298      	cmp	r0, r3
 80007f4:	d030      	beq.n	8000858 <DMA_DeInit+0x90>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 80007f6:	4b34      	ldr	r3, [pc, #208]	@ (80008c8 <DMA_DeInit+0x100>)
 80007f8:	4298      	cmp	r0, r3
 80007fa:	d021      	beq.n	8000840 <DMA_DeInit+0x78>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 80007fc:	4b33      	ldr	r3, [pc, #204]	@ (80008cc <DMA_DeInit+0x104>)
 80007fe:	4298      	cmp	r0, r3
 8000800:	d030      	beq.n	8000864 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8000802:	4b33      	ldr	r3, [pc, #204]	@ (80008d0 <DMA_DeInit+0x108>)
 8000804:	4298      	cmp	r0, r3
 8000806:	d039      	beq.n	800087c <DMA_DeInit+0xb4>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000808:	4b32      	ldr	r3, [pc, #200]	@ (80008d4 <DMA_DeInit+0x10c>)
 800080a:	4298      	cmp	r0, r3
 800080c:	d03c      	beq.n	8000888 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 800080e:	4b32      	ldr	r3, [pc, #200]	@ (80008d8 <DMA_DeInit+0x110>)
 8000810:	4298      	cmp	r0, r3
 8000812:	d02d      	beq.n	8000870 <DMA_DeInit+0xa8>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8000814:	4b31      	ldr	r3, [pc, #196]	@ (80008dc <DMA_DeInit+0x114>)
 8000816:	4298      	cmp	r0, r3
 8000818:	d03c      	beq.n	8000894 <DMA_DeInit+0xcc>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 800081a:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <DMA_DeInit+0x118>)
 800081c:	4298      	cmp	r0, r3
 800081e:	d03f      	beq.n	80008a0 <DMA_DeInit+0xd8>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8000820:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <DMA_DeInit+0x11c>)
 8000822:	4298      	cmp	r0, r3
 8000824:	d042      	beq.n	80008ac <DMA_DeInit+0xe4>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000826:	4770      	bx	lr
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8000828:	4a2f      	ldr	r2, [pc, #188]	@ (80008e8 <DMA_DeInit+0x120>)
 800082a:	6853      	ldr	r3, [r2, #4]
 800082c:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000830:	6053      	str	r3, [r2, #4]
 8000832:	4770      	bx	lr
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8000834:	4a2c      	ldr	r2, [pc, #176]	@ (80008e8 <DMA_DeInit+0x120>)
 8000836:	6853      	ldr	r3, [r2, #4]
 8000838:	f043 030f 	orr.w	r3, r3, #15
 800083c:	6053      	str	r3, [r2, #4]
 800083e:	4770      	bx	lr
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8000840:	4a29      	ldr	r2, [pc, #164]	@ (80008e8 <DMA_DeInit+0x120>)
 8000842:	6853      	ldr	r3, [r2, #4]
 8000844:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000848:	6053      	str	r3, [r2, #4]
 800084a:	4770      	bx	lr
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 800084c:	4a26      	ldr	r2, [pc, #152]	@ (80008e8 <DMA_DeInit+0x120>)
 800084e:	6853      	ldr	r3, [r2, #4]
 8000850:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000854:	6053      	str	r3, [r2, #4]
 8000856:	4770      	bx	lr
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8000858:	4a23      	ldr	r2, [pc, #140]	@ (80008e8 <DMA_DeInit+0x120>)
 800085a:	6853      	ldr	r3, [r2, #4]
 800085c:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000860:	6053      	str	r3, [r2, #4]
 8000862:	4770      	bx	lr
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8000864:	4a20      	ldr	r2, [pc, #128]	@ (80008e8 <DMA_DeInit+0x120>)
 8000866:	6853      	ldr	r3, [r2, #4]
 8000868:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800086c:	6053      	str	r3, [r2, #4]
 800086e:	4770      	bx	lr
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8000870:	4a1e      	ldr	r2, [pc, #120]	@ (80008ec <DMA_DeInit+0x124>)
 8000872:	6853      	ldr	r3, [r2, #4]
 8000874:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000878:	6053      	str	r3, [r2, #4]
 800087a:	4770      	bx	lr
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 800087c:	4a1a      	ldr	r2, [pc, #104]	@ (80008e8 <DMA_DeInit+0x120>)
 800087e:	6853      	ldr	r3, [r2, #4]
 8000880:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 8000884:	6053      	str	r3, [r2, #4]
 8000886:	4770      	bx	lr
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8000888:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <DMA_DeInit+0x124>)
 800088a:	6853      	ldr	r3, [r2, #4]
 800088c:	f043 030f 	orr.w	r3, r3, #15
 8000890:	6053      	str	r3, [r2, #4]
 8000892:	4770      	bx	lr
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8000894:	4a15      	ldr	r2, [pc, #84]	@ (80008ec <DMA_DeInit+0x124>)
 8000896:	6853      	ldr	r3, [r2, #4]
 8000898:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 800089c:	6053      	str	r3, [r2, #4]
 800089e:	4770      	bx	lr
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 80008a0:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <DMA_DeInit+0x124>)
 80008a2:	6853      	ldr	r3, [r2, #4]
 80008a4:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 80008a8:	6053      	str	r3, [r2, #4]
 80008aa:	4770      	bx	lr
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 80008ac:	4a0f      	ldr	r2, [pc, #60]	@ (80008ec <DMA_DeInit+0x124>)
 80008ae:	6853      	ldr	r3, [r2, #4]
 80008b0:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 80008b4:	6053      	str	r3, [r2, #4]
}
 80008b6:	e7b6      	b.n	8000826 <DMA_DeInit+0x5e>
 80008b8:	40026008 	.word	0x40026008
 80008bc:	4002601c 	.word	0x4002601c
 80008c0:	40026030 	.word	0x40026030
 80008c4:	40026044 	.word	0x40026044
 80008c8:	40026058 	.word	0x40026058
 80008cc:	4002606c 	.word	0x4002606c
 80008d0:	40026080 	.word	0x40026080
 80008d4:	40026408 	.word	0x40026408
 80008d8:	4002641c 	.word	0x4002641c
 80008dc:	40026430 	.word	0x40026430
 80008e0:	40026444 	.word	0x40026444
 80008e4:	40026458 	.word	0x40026458
 80008e8:	40026000 	.word	0x40026000
 80008ec:	40026400 	.word	0x40026400

080008f0 <DMA_Init>:
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80008f0:	688b      	ldr	r3, [r1, #8]
{
 80008f2:	b430      	push	{r4, r5}
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80008f4:	6a0c      	ldr	r4, [r1, #32]
 80008f6:	690a      	ldr	r2, [r1, #16]
 80008f8:	4323      	orrs	r3, r4
 80008fa:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80008fc:	69cd      	ldr	r5, [r1, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80008fe:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8000902:	4323      	orrs	r3, r4
 8000904:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000906:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8000908:	432b      	orrs	r3, r5
  tmpreg = DMAy_Channelx->CCR;
 800090a:	6802      	ldr	r2, [r0, #0]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800090c:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800090e:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  tmpreg &= CCR_CLEAR_MASK;
 8000910:	f36f 120e 	bfc	r2, #4, #11
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000914:	4323      	orrs	r3, r4
  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000916:	68cc      	ldr	r4, [r1, #12]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000918:	4313      	orrs	r3, r2
  DMAy_Channelx->CCR = tmpreg;
 800091a:	6003      	str	r3, [r0, #0]
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800091c:	e9d1 2300 	ldrd	r2, r3, [r1]
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000920:	6044      	str	r4, [r0, #4]
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000922:	6082      	str	r2, [r0, #8]
}
 8000924:	bc30      	pop	{r4, r5}
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000926:	60c3      	str	r3, [r0, #12]
}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800092c:	2300      	movs	r3, #0
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 800092e:	e9c0 3300 	strd	r3, r3, [r0]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8000932:	e9c0 3302 	strd	r3, r3, [r0, #8]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8000936:	e9c0 3304 	strd	r3, r3, [r0, #16]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800093a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800093e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8000942:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <DMA_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000948:	b121      	cbz	r1, 8000954 <DMA_Cmd+0xc>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800094a:	6803      	ldr	r3, [r0, #0]
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6003      	str	r3, [r0, #0]
 8000952:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000954:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000958:	6803      	ldr	r3, [r0, #0]
 800095a:	4013      	ands	r3, r2
 800095c:	6003      	str	r3, [r0, #0]
  }
}
 800095e:	4770      	bx	lr

08000960 <DMA_SetCurrDataCounter>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8000960:	6041      	str	r1, [r0, #4]
}
 8000962:	4770      	bx	lr

08000964 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8000964:	6840      	ldr	r0, [r0, #4]
}
 8000966:	b280      	uxth	r0, r0
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <DMA_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 800096c:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 800096e:	b112      	cbz	r2, 8000976 <DMA_ITConfig+0xa>
    DMAy_Channelx->CCR |= DMA_IT;
 8000970:	430b      	orrs	r3, r1
 8000972:	6003      	str	r3, [r0, #0]
 8000974:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000976:	ea23 0301 	bic.w	r3, r3, r1
 800097a:	6003      	str	r3, [r0, #0]
  }
}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <DMA_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000980:	00c3      	lsls	r3, r0, #3
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8000982:	bf54      	ite	pl
 8000984:	4b03      	ldrpl	r3, [pc, #12]	@ (8000994 <DMA_GetFlagStatus+0x14>)
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8000986:	4b04      	ldrmi	r3, [pc, #16]	@ (8000998 <DMA_GetFlagStatus+0x18>)
 8000988:	681b      	ldr	r3, [r3, #0]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 800098a:	4203      	tst	r3, r0
    bitstatus = RESET;
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
}
 800098c:	bf14      	ite	ne
 800098e:	2001      	movne	r0, #1
 8000990:	2000      	moveq	r0, #0
 8000992:	4770      	bx	lr
 8000994:	40026000 	.word	0x40026000
 8000998:	40026400 	.word	0x40026400

0800099c <DMA_ClearFlag>:
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 800099c:	00c3      	lsls	r3, r0, #3
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 800099e:	bf54      	ite	pl
 80009a0:	4b01      	ldrpl	r3, [pc, #4]	@ (80009a8 <DMA_ClearFlag+0xc>)
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80009a2:	4b02      	ldrmi	r3, [pc, #8]	@ (80009ac <DMA_ClearFlag+0x10>)
 80009a4:	6058      	str	r0, [r3, #4]
  }  
}
 80009a6:	4770      	bx	lr
 80009a8:	40026000 	.word	0x40026000
 80009ac:	40026400 	.word	0x40026400

080009b0 <DMA_GetITStatus>:
  *    Half-transfer Complete or Transfer Error interrupts: DMAy_IT_TCx, 
  *    DMAy_IT_HTx or DMAy_IT_TEx). 
  *      
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
 80009b0:	00c3      	lsls	r3, r0, #3
 80009b2:	bf54      	ite	pl
 80009b4:	4b03      	ldrpl	r3, [pc, #12]	@ (80009c4 <DMA_GetITStatus+0x14>)
 80009b6:	4b04      	ldrmi	r3, [pc, #16]	@ (80009c8 <DMA_GetITStatus+0x18>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4218      	tst	r0, r3
 80009bc:	bf14      	ite	ne
 80009be:	2001      	movne	r0, #1
 80009c0:	2000      	moveq	r0, #0
 80009c2:	4770      	bx	lr
 80009c4:	40026000 	.word	0x40026000
 80009c8:	40026400 	.word	0x40026400

080009cc <DMA_ClearITPendingBit>:
  *    Complete and Transfer Error interrupts: DMAy_IT_TCx, DMAy_IT_HTx and 
  *    DMAy_IT_TEx).  
  *        
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
 80009cc:	00c3      	lsls	r3, r0, #3
 80009ce:	bf54      	ite	pl
 80009d0:	4b01      	ldrpl	r3, [pc, #4]	@ (80009d8 <DMA_ClearITPendingBit+0xc>)
 80009d2:	4b02      	ldrmi	r3, [pc, #8]	@ (80009dc <DMA_ClearITPendingBit+0x10>)
 80009d4:	6058      	str	r0, [r3, #4]
 80009d6:	4770      	bx	lr
 80009d8:	40026000 	.word	0x40026000
 80009dc:	40026400 	.word	0x40026400

080009e0 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 80009e0:	2200      	movs	r2, #0
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000; 
  EXTI->FTSR = 0x00000000; 
  EXTI->PR = 0x00FFFFFF;
 80009e2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
  EXTI->IMR = 0x00000000;
 80009e6:	4b03      	ldr	r3, [pc, #12]	@ (80009f4 <EXTI_DeInit+0x14>)
 80009e8:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80009ea:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
 80009ec:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
 80009ee:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x00FFFFFF;
 80009f0:	6159      	str	r1, [r3, #20]
}
 80009f2:	4770      	bx	lr
 80009f4:	40010400 	.word	0x40010400

080009f8 <EXTI_Init>:
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80009f8:	7903      	ldrb	r3, [r0, #4]
{
 80009fa:	b430      	push	{r4, r5}
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80009fc:	7982      	ldrb	r2, [r0, #6]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80009fe:	6804      	ldr	r4, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000a00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a04:	43e1      	mvns	r1, r4
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000a06:	f503 3382 	add.w	r3, r3, #66560	@ 0x10400
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000a0a:	b1f2      	cbz	r2, 8000a4a <EXTI_Init+0x52>
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a0c:	4a15      	ldr	r2, [pc, #84]	@ (8000a64 <EXTI_Init+0x6c>)
 8000a0e:	6815      	ldr	r5, [r2, #0]
 8000a10:	400d      	ands	r5, r1
 8000a12:	6015      	str	r5, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a14:	6855      	ldr	r5, [r2, #4]
 8000a16:	4029      	ands	r1, r5
 8000a18:	6051      	str	r1, [r2, #4]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000a1a:	6819      	ldr	r1, [r3, #0]
 8000a1c:	4321      	orrs	r1, r4
 8000a1e:	6019      	str	r1, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a20:	6891      	ldr	r1, [r2, #8]
 8000a22:	6803      	ldr	r3, [r0, #0]
 8000a24:	ea21 0103 	bic.w	r1, r1, r3
 8000a28:	6091      	str	r1, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a2a:	68d1      	ldr	r1, [r2, #12]
 8000a2c:	ea21 0103 	bic.w	r1, r1, r3
 8000a30:	60d1      	str	r1, [r2, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000a32:	7941      	ldrb	r1, [r0, #5]
 8000a34:	2910      	cmp	r1, #16
 8000a36:	d00d      	beq.n	8000a54 <EXTI_Init+0x5c>
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000a38:	bc30      	pop	{r4, r5}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000a3a:	f101 4280 	add.w	r2, r1, #1073741824	@ 0x40000000
 8000a3e:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000a42:	6811      	ldr	r1, [r2, #0]
 8000a44:	430b      	orrs	r3, r1
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	4770      	bx	lr
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000a4a:	681a      	ldr	r2, [r3, #0]
}
 8000a4c:	bc30      	pop	{r4, r5}
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000a4e:	400a      	ands	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
}
 8000a52:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000a54:	6891      	ldr	r1, [r2, #8]
}
 8000a56:	bc30      	pop	{r4, r5}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000a58:	4319      	orrs	r1, r3
 8000a5a:	6091      	str	r1, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000a5c:	68d1      	ldr	r1, [r2, #12]
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	60d3      	str	r3, [r2, #12]
}
 8000a62:	4770      	bx	lr
 8000a64:	40010400 	.word	0x40010400

08000a68 <EXTI_StructInit>:
  *   be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000a68:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000a6a:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000a6e:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000a70:	8082      	strh	r2, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8000a72:	7183      	strb	r3, [r0, #6]
}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8000a78:	4a02      	ldr	r2, [pc, #8]	@ (8000a84 <EXTI_GenerateSWInterrupt+0xc>)
 8000a7a:	6913      	ldr	r3, [r2, #16]
 8000a7c:	4303      	orrs	r3, r0
 8000a7e:	6113      	str	r3, [r2, #16]
}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40010400 	.word	0x40010400

08000a88 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000a88:	4b03      	ldr	r3, [pc, #12]	@ (8000a98 <EXTI_GetFlagStatus+0x10>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	4203      	tst	r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000a8e:	bf14      	ite	ne
 8000a90:	2001      	movne	r0, #1
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40010400 	.word	0x40010400

08000a9c <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000a9c:	4b01      	ldr	r3, [pc, #4]	@ (8000aa4 <EXTI_ClearFlag+0x8>)
 8000a9e:	6158      	str	r0, [r3, #20]
}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40010400 	.word	0x40010400

08000aa8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be:
  *   EXTI_Linex: External interrupt line x where x(0..23).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <EXTI_GetITStatus+0x10>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	4218      	tst	r0, r3
 8000aae:	bf14      	ite	ne
 8000ab0:	2001      	movne	r0, #1
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40010400 	.word	0x40010400

08000abc <EXTI_ClearITPendingBit>:
  * @brief  Clears the EXTI's line pending bits.
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..23).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
 8000abc:	4b01      	ldr	r3, [pc, #4]	@ (8000ac4 <EXTI_ClearITPendingBit+0x8>)
 8000abe:	6158      	str	r0, [r3, #20]
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40010400 	.word	0x40010400

08000ac8 <GPIO_DeInit>:
  *         (except JTAG pins).
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000ac8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8000aca:	4b34      	ldr	r3, [pc, #208]	@ (8000b9c <GPIO_DeInit+0xd4>)
 8000acc:	4298      	cmp	r0, r3
 8000ace:	d01f      	beq.n	8000b10 <GPIO_DeInit+0x48>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);  
  }
  else if(GPIOx == GPIOB)
 8000ad0:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <GPIO_DeInit+0xd8>)
 8000ad2:	4298      	cmp	r0, r3
 8000ad4:	d026      	beq.n	8000b24 <GPIO_DeInit+0x5c>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 8000ad6:	4b33      	ldr	r3, [pc, #204]	@ (8000ba4 <GPIO_DeInit+0xdc>)
 8000ad8:	4298      	cmp	r0, r3
 8000ada:	d02d      	beq.n	8000b38 <GPIO_DeInit+0x70>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 8000adc:	4b32      	ldr	r3, [pc, #200]	@ (8000ba8 <GPIO_DeInit+0xe0>)
 8000ade:	4298      	cmp	r0, r3
 8000ae0:	d00c      	beq.n	8000afc <GPIO_DeInit+0x34>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
 8000ae2:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <GPIO_DeInit+0xe4>)
 8000ae4:	4298      	cmp	r0, r3
 8000ae6:	d031      	beq.n	8000b4c <GPIO_DeInit+0x84>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  }
  else if(GPIOx == GPIOF)
 8000ae8:	4b31      	ldr	r3, [pc, #196]	@ (8000bb0 <GPIO_DeInit+0xe8>)
 8000aea:	4298      	cmp	r0, r3
 8000aec:	d038      	beq.n	8000b60 <GPIO_DeInit+0x98>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
  }
  else if(GPIOx == GPIOG)
 8000aee:	4b31      	ldr	r3, [pc, #196]	@ (8000bb4 <GPIO_DeInit+0xec>)
 8000af0:	4298      	cmp	r0, r3
 8000af2:	d03f      	beq.n	8000b74 <GPIO_DeInit+0xac>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, DISABLE);
  }   
  else
  {
    if(GPIOx == GPIOH)
 8000af4:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <GPIO_DeInit+0xf0>)
 8000af6:	4298      	cmp	r0, r3
 8000af8:	d046      	beq.n	8000b88 <GPIO_DeInit+0xc0>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 8000afa:	bd08      	pop	{r3, pc}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000afc:	2101      	movs	r1, #1
 8000afe:	2008      	movs	r0, #8
 8000b00:	f000 fc6a 	bl	80013d8 <RCC_AHBPeriphResetCmd>
}
 8000b04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2008      	movs	r0, #8
 8000b0c:	f000 bc64 	b.w	80013d8 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000b10:	2101      	movs	r1, #1
 8000b12:	4608      	mov	r0, r1
 8000b14:	f000 fc60 	bl	80013d8 <RCC_AHBPeriphResetCmd>
}
 8000b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);  
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f000 bc5a 	b.w	80013d8 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000b24:	2101      	movs	r1, #1
 8000b26:	2002      	movs	r0, #2
 8000b28:	f000 fc56 	bl	80013d8 <RCC_AHBPeriphResetCmd>
}
 8000b2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8000b30:	2100      	movs	r1, #0
 8000b32:	2002      	movs	r0, #2
 8000b34:	f000 bc50 	b.w	80013d8 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000b38:	2101      	movs	r1, #1
 8000b3a:	2004      	movs	r0, #4
 8000b3c:	f000 fc4c 	bl	80013d8 <RCC_AHBPeriphResetCmd>
}
 8000b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000b44:	2100      	movs	r1, #0
 8000b46:	2004      	movs	r0, #4
 8000b48:	f000 bc46 	b.w	80013d8 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	2010      	movs	r0, #16
 8000b50:	f000 fc42 	bl	80013d8 <RCC_AHBPeriphResetCmd>
}
 8000b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2010      	movs	r0, #16
 8000b5c:	f000 bc3c 	b.w	80013d8 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8000b60:	2101      	movs	r1, #1
 8000b62:	2040      	movs	r0, #64	@ 0x40
 8000b64:	f000 fc38 	bl	80013d8 <RCC_AHBPeriphResetCmd>
}
 8000b68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2040      	movs	r0, #64	@ 0x40
 8000b70:	f000 bc32 	b.w	80013d8 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, ENABLE);
 8000b74:	2101      	movs	r1, #1
 8000b76:	2080      	movs	r0, #128	@ 0x80
 8000b78:	f000 fc2e 	bl	80013d8 <RCC_AHBPeriphResetCmd>
}
 8000b7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, DISABLE);
 8000b80:	2100      	movs	r1, #0
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	f000 bc28 	b.w	80013d8 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	2020      	movs	r0, #32
 8000b8c:	f000 fc24 	bl	80013d8 <RCC_AHBPeriphResetCmd>
}
 8000b90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
 8000b94:	2100      	movs	r1, #0
 8000b96:	2020      	movs	r0, #32
 8000b98:	f000 bc1e 	b.w	80013d8 <RCC_AHBPeriphResetCmd>
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020c00 	.word	0x40020c00
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	40021c00 	.word	0x40021c00
 8000bb8:	40021400 	.word	0x40021400

08000bbc <GPIO_Init>:
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000bbc:	2200      	movs	r2, #0
{
 8000bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000bc2:	4613      	mov	r3, r2
    pos = ((uint32_t)0x01) << pinpos;
 8000bc4:	f04f 0e01 	mov.w	lr, #1
    if (currentpin == pos)
    {
      /* Use temporary variable to update MODER register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->MODER;
      tmpreg &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bc8:	2603      	movs	r6, #3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000bca:	680d      	ldr	r5, [r1, #0]
 8000bcc:	e004      	b.n	8000bd8 <GPIO_Init+0x1c>
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000bce:	3301      	adds	r3, #1
 8000bd0:	2b10      	cmp	r3, #16
 8000bd2:	f102 0202 	add.w	r2, r2, #2
 8000bd6:	d039      	beq.n	8000c4c <GPIO_Init+0x90>
    pos = ((uint32_t)0x01) << pinpos;
 8000bd8:	fa0e f403 	lsl.w	r4, lr, r3
    if (currentpin == pos)
 8000bdc:	ea34 0705 	bics.w	r7, r4, r5
 8000be0:	d1f5      	bne.n	8000bce <GPIO_Init+0x12>
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000be2:	790f      	ldrb	r7, [r1, #4]
      tmpreg = GPIOx->MODER;
 8000be4:	f8d0 9000 	ldr.w	r9, [r0]
      tmpreg &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000be8:	fa06 fc02 	lsl.w	ip, r6, r2
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bec:	fa07 f802 	lsl.w	r8, r7, r2
      tmpreg &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bf0:	ea29 090c 	bic.w	r9, r9, ip
      GPIOx->MODER = tmpreg;

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bf4:	3f01      	subs	r7, #1
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bf6:	ea48 0809 	orr.w	r8, r8, r9
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bfa:	2f01      	cmp	r7, #1
      tmpreg &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bfc:	ea6f 0c0c 	mvn.w	ip, ip
      GPIOx->MODER = tmpreg;
 8000c00:	f8c0 8000 	str.w	r8, [r0]
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c04:	d814      	bhi.n	8000c30 <GPIO_Init+0x74>
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Use temporary variable to update OSPEEDR register configuration, to avoid 
          unexpected transition in the GPIO pin configuration. */
        tmpreg = GPIOx->OSPEEDR;
 8000c06:	f8d0 8008 	ldr.w	r8, [r0, #8]
        tmpreg &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        tmpreg |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c0a:	794f      	ldrb	r7, [r1, #5]
        tmpreg &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c0c:	ea0c 0c08 	and.w	ip, ip, r8
        tmpreg |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c10:	4097      	lsls	r7, r2
 8000c12:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = tmpreg;
 8000c16:	6087      	str	r7, [r0, #8]
        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Use temporary variable to update OTYPER register configuration, to avoid 
          unexpected transition in the GPIO pin configuration. */
        tmpreg = GPIOx->OTYPER;
 8000c18:	f8b0 c004 	ldrh.w	ip, [r0, #4]
        tmpreg &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        tmpreg |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c1c:	798f      	ldrb	r7, [r1, #6]
        tmpreg = GPIOx->OTYPER;
 8000c1e:	fa1f fc8c 	uxth.w	ip, ip
        tmpreg |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c22:	409f      	lsls	r7, r3
        tmpreg &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000c24:	ea2c 0c04 	bic.w	ip, ip, r4
        tmpreg |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c28:	b2bc      	uxth	r4, r7
        GPIOx->OTYPER = tmpreg;
 8000c2a:	ea44 040c 	orr.w	r4, r4, ip
 8000c2e:	8084      	strh	r4, [r0, #4]
      }

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
 8000c30:	68c7      	ldr	r7, [r0, #12]
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c32:	79cc      	ldrb	r4, [r1, #7]
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c34:	fa06 fc02 	lsl.w	ip, r6, r2
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c38:	4094      	lsls	r4, r2
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c3a:	ea27 070c 	bic.w	r7, r7, ip
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c3e:	3301      	adds	r3, #1
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c40:	433c      	orrs	r4, r7
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c42:	2b10      	cmp	r3, #16
      GPIOx->PUPDR = tmpreg;
 8000c44:	60c4      	str	r4, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c46:	f102 0202 	add.w	r2, r2, #2
 8000c4a:	d1c5      	bne.n	8000bd8 <GPIO_Init+0x1c>
    }
  }
}
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000c50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c54:	2300      	movs	r3, #0
 8000c56:	e9c0 2300 	strd	r2, r3, [r0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_400KHz;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
}
 8000c5a:	4770      	bx	lr

08000c5c <GPIO_PinLockConfig>:
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
{
 8000c60:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000c62:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8000c64:	9b01      	ldr	r3, [sp, #4]
 8000c66:	430b      	orrs	r3, r1
 8000c68:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000c6a:	9b01      	ldr	r3, [sp, #4]
 8000c6c:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000c6e:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000c70:	9b01      	ldr	r3, [sp, #4]
 8000c72:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000c74:	69c3      	ldr	r3, [r0, #28]
 8000c76:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000c78:	69c3      	ldr	r3, [r0, #28]
 8000c7a:	9301      	str	r3, [sp, #4]
}
 8000c7c:	b002      	add	sp, #8
 8000c7e:	4770      	bx	lr

08000c80 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000c80:	8a03      	ldrh	r3, [r0, #16]
 8000c82:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000c84:	bf14      	ite	ne
 8000c86:	2001      	movne	r0, #1
 8000c88:	2000      	moveq	r0, #0
 8000c8a:	4770      	bx	lr

08000c8c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8000c8c:	8a00      	ldrh	r0, [r0, #16]
}
 8000c8e:	b280      	uxth	r0, r0
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000c94:	8a83      	ldrh	r3, [r0, #20]
 8000c96:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000c98:	bf14      	ite	ne
 8000c9a:	2001      	movne	r0, #1
 8000c9c:	2000      	moveq	r0, #0
 8000c9e:	4770      	bx	lr

08000ca0 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8000ca0:	8a80      	ldrh	r0, [r0, #20]
}
 8000ca2:	b280      	uxth	r0, r0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 8000ca8:	8301      	strh	r1, [r0, #24]
}
 8000caa:	4770      	bx	lr

08000cac <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 8000cac:	8341      	strh	r1, [r0, #26]
}
 8000cae:	4770      	bx	lr

08000cb0 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000cb0:	b10a      	cbz	r2, 8000cb6 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000cb2:	8301      	strh	r1, [r0, #24]
 8000cb4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000cb6:	8341      	strh	r1, [r0, #26]
  }
}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8000cbc:	8281      	strh	r1, [r0, #20]
}
 8000cbe:	4770      	bx	lr

08000cc0 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000cc0:	8a83      	ldrh	r3, [r0, #20]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	404b      	eors	r3, r1
 8000cc6:	8283      	strh	r3, [r0, #20]
}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000ccc:	f04f 0c0f 	mov.w	ip, #15
 8000cd0:	08cb      	lsrs	r3, r1, #3
 8000cd2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cd6:	f001 0107 	and.w	r1, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cda:	6a03      	ldr	r3, [r0, #32]
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cdc:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cde:	fa0c fc01 	lsl.w	ip, ip, r1
 8000ce2:	ea23 030c 	bic.w	r3, r3, ip
 8000ce6:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000ce8:	6a03      	ldr	r3, [r0, #32]
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cea:	408a      	lsls	r2, r1
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000cec:	431a      	orrs	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000cee:	6202      	str	r2, [r0, #32]
}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000cf4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <I2C_DeInit+0x38>)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000cf8:	2101      	movs	r1, #1
  if (I2Cx == I2C1)
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d00a      	beq.n	8000d14 <I2C_DeInit+0x20>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000cfe:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000d02:	f000 fb81 	bl	8001408 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8000d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000d10:	f000 bb7a 	b.w	8001408 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000d14:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000d18:	f000 fb76 	bl	8001408 <RCC_APB1PeriphResetCmd>
}
 8000d1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8000d20:	2100      	movs	r1, #0
 8000d22:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000d26:	f000 bb6f 	b.w	8001408 <RCC_APB1PeriphResetCmd>
 8000d2a:	bf00      	nop
 8000d2c:	40005400 	.word	0x40005400

08000d30 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d32:	4604      	mov	r4, r0
 8000d34:	460d      	mov	r5, r1
 8000d36:	b085      	sub	sp, #20
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000d38:	4668      	mov	r0, sp
  tmpreg = I2Cx->CR2;
 8000d3a:	88a6      	ldrh	r6, [r4, #4]
  RCC_GetClocksFreq(&rcc_clocks);
 8000d3c:	f000 faae 	bl	800129c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000d40:	4a2f      	ldr	r2, [pc, #188]	@ (8000e00 <I2C_Init+0xd0>)
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000d42:	9902      	ldr	r1, [sp, #8]
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000d44:	f026 063f 	bic.w	r6, r6, #63	@ 0x3f
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000d48:	fba2 3201 	umull	r3, r2, r2, r1
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000d4c:	0436      	lsls	r6, r6, #16
 8000d4e:	0c36      	lsrs	r6, r6, #16
  tmpreg |= freqrange;
 8000d50:	ea46 4692 	orr.w	r6, r6, r2, lsr #18
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000d54:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000d56:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000d58:	4f2a      	ldr	r7, [pc, #168]	@ (8000e04 <I2C_Init+0xd4>)
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000d5a:	f023 0301 	bic.w	r3, r3, #1
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	0c1b      	lsrs	r3, r3, #16
 8000d62:	8023      	strh	r3, [r4, #0]
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000d64:	682b      	ldr	r3, [r5, #0]
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000d66:	0c90      	lsrs	r0, r2, #18
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000d68:	42bb      	cmp	r3, r7
 8000d6a:	d823      	bhi.n	8000db4 <I2C_Init+0x84>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d72:	4602      	mov	r2, r0
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf38      	it	cc
 8000d7a:	2304      	movcc	r3, #4
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000d7c:	3201      	adds	r2, #1
 8000d7e:	8422      	strh	r2, [r4, #32]
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000d80:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000d82:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000d84:	88a9      	ldrh	r1, [r5, #4]
  I2Cx->CR1 |= I2C_CR1_PE;
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	8023      	strh	r3, [r4, #0]
  tmpreg = I2Cx->CR1;
 8000d8e:	8823      	ldrh	r3, [r4, #0]
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000d90:	896a      	ldrh	r2, [r5, #10]
  tmpreg &= CR1_CLEAR_MASK;
 8000d92:	f423 6381 	bic.w	r3, r3, #1032	@ 0x408
 8000d96:	f023 0302 	bic.w	r3, r3, #2
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000d9a:	8928      	ldrh	r0, [r5, #8]
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000d9c:	4311      	orrs	r1, r2
  tmpreg &= CR1_CLEAR_MASK;
 8000d9e:	041b      	lsls	r3, r3, #16
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000da0:	89aa      	ldrh	r2, [r5, #12]
  tmpreg &= CR1_CLEAR_MASK;
 8000da2:	0c1b      	lsrs	r3, r3, #16
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000da4:	4302      	orrs	r2, r0
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000da6:	430b      	orrs	r3, r1
 8000da8:	b29b      	uxth	r3, r3
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000daa:	b292      	uxth	r2, r2
  I2Cx->CR1 = tmpreg;
 8000dac:	8023      	strh	r3, [r4, #0]
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000dae:	8122      	strh	r2, [r4, #8]
}
 8000db0:	b005      	add	sp, #20
 8000db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000db4:	f64b 72ff 	movw	r2, #49151	@ 0xbfff
 8000db8:	88ee      	ldrh	r6, [r5, #6]
 8000dba:	4296      	cmp	r6, r2
 8000dbc:	d01a      	beq.n	8000df4 <I2C_Init+0xc4>
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000dbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dc6:	fbb1 f1f3 	udiv	r1, r1, r3
 8000dca:	b289      	uxth	r1, r1
      result |= I2C_DutyCycle_16_9;
 8000dcc:	f441 4380 	orr.w	r3, r1, #16384	@ 0x4000
    if ((result & I2C_CCR_CCR) == 0)
 8000dd0:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000dd4:	b90a      	cbnz	r2, 8000dda <I2C_Init+0xaa>
      result |= (uint16_t)0x0001;  
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000dda:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000dde:	fb01 f000 	mul.w	r0, r1, r0
 8000de2:	4a09      	ldr	r2, [pc, #36]	@ (8000e08 <I2C_Init+0xd8>)
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000de8:	fba2 2000 	umull	r2, r0, r2, r0
 8000dec:	0980      	lsrs	r0, r0, #6
 8000dee:	3001      	adds	r0, #1
 8000df0:	8420      	strh	r0, [r4, #32]
 8000df2:	e7c5      	b.n	8000d80 <I2C_Init+0x50>
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000df4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	e7e7      	b.n	8000dd0 <I2C_Init+0xa0>
 8000e00:	431bde83 	.word	0x431bde83
 8000e04:	000186a0 	.word	0x000186a0
 8000e08:	10624dd3 	.word	0x10624dd3

08000e0c <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8000e0c:	b410      	push	{r4}
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8000e0e:	2200      	movs	r2, #0
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8000e10:	f241 3488 	movw	r4, #5000	@ 0x1388
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000e14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8000e18:	4903      	ldr	r1, [pc, #12]	@ (8000e28 <I2C_StructInit+0x1c>)
 8000e1a:	6082      	str	r2, [r0, #8]
 8000e1c:	e9c0 4100 	strd	r4, r1, [r0]
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000e20:	8183      	strh	r3, [r0, #12]
}
 8000e22:	bc10      	pop	{r4}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	bfff0000 	.word	0xbfff0000

08000e2c <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000e2c:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000e2e:	b121      	cbz	r1, 8000e3a <I2C_Cmd+0xe>
    I2Cx->CR1 |= I2C_CR1_PE;
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	8003      	strh	r3, [r0, #0]
 8000e38:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000e3a:	f023 0301 	bic.w	r3, r3, #1
 8000e3e:	041b      	lsls	r3, r3, #16
 8000e40:	0c1b      	lsrs	r3, r3, #16
 8000e42:	8003      	strh	r3, [r0, #0]
  }
}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8000e48:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000e4a:	b121      	cbz	r1, 8000e56 <I2C_GenerateSTART+0xe>
    I2Cx->CR1 |= I2C_CR1_START;
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e52:	8003      	strh	r3, [r0, #0]
 8000e54:	4770      	bx	lr
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8000e56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e5a:	041b      	lsls	r3, r3, #16
 8000e5c:	0c1b      	lsrs	r3, r3, #16
 8000e5e:	8003      	strh	r3, [r0, #0]
  }
}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000e64:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000e66:	b121      	cbz	r1, 8000e72 <I2C_GenerateSTOP+0xe>
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e6e:	8003      	strh	r3, [r0, #0]
 8000e70:	4770      	bx	lr
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000e72:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	8003      	strh	r3, [r0, #0]
  }
}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8000e80:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000e82:	b121      	cbz	r1, 8000e8e <I2C_AcknowledgeConfig+0xe>
    I2Cx->CR1 |= I2C_CR1_ACK;
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e8a:	8003      	strh	r3, [r0, #0]
 8000e8c:	4770      	bx	lr
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8000e8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e92:	041b      	lsls	r3, r3, #16
 8000e94:	0c1b      	lsrs	r3, r3, #16
 8000e96:	8003      	strh	r3, [r0, #0]
  }
}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8000e9c:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8000e9e:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8000ea2:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	0c1b      	lsrs	r3, r3, #16
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8000eaa:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8000eac:	8183      	strh	r3, [r0, #12]
}
 8000eae:	4770      	bx	lr

08000eb0 <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8000eb0:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8000eb2:	b121      	cbz	r1, 8000ebe <I2C_DualAddressCmd+0xe>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	8183      	strh	r3, [r0, #12]
 8000ebc:	4770      	bx	lr
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8000ebe:	f023 0301 	bic.w	r3, r3, #1
 8000ec2:	041b      	lsls	r3, r3, #16
 8000ec4:	0c1b      	lsrs	r3, r3, #16
 8000ec6:	8183      	strh	r3, [r0, #12]
  }
}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8000ecc:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000ece:	b121      	cbz	r1, 8000eda <I2C_GeneralCallCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed6:	8003      	strh	r3, [r0, #0]
 8000ed8:	4770      	bx	lr
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8000eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c1b      	lsrs	r3, r3, #16
 8000ee2:	8003      	strh	r3, [r0, #0]
  }
}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8000ee8:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000eea:	b131      	cbz	r1, 8000efa <I2C_SoftwareResetCmd+0x12>
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8000eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	8003      	strh	r3, [r0, #0]
 8000ef8:	4770      	bx	lr
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8000efa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000efe:	8003      	strh	r3, [r0, #0]
  }
}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8000f04:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8000f08:	8803      	ldrh	r3, [r0, #0]
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8000f0a:	d005      	beq.n	8000f18 <I2C_SMBusAlertConfig+0x14>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8000f0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f10:	041b      	lsls	r3, r3, #16
 8000f12:	0c1b      	lsrs	r3, r3, #16
 8000f14:	8003      	strh	r3, [r0, #0]
  }
}
 8000f16:	4770      	bx	lr
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f1e:	8003      	strh	r3, [r0, #0]
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8000f24:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000f26:	b121      	cbz	r1, 8000f32 <I2C_ARPCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	f043 0310 	orr.w	r3, r3, #16
 8000f2e:	8003      	strh	r3, [r0, #0]
 8000f30:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8000f32:	f023 0310 	bic.w	r3, r3, #16
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	8003      	strh	r3, [r0, #0]
  }
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8000f40:	8803      	ldrh	r3, [r0, #0]
  if (NewState == DISABLE)
 8000f42:	b921      	cbnz	r1, 8000f4e <I2C_StretchClockCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f4a:	8003      	strh	r3, [r0, #0]
 8000f4c:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8000f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	0c1b      	lsrs	r3, r3, #16
 8000f56:	8003      	strh	r3, [r0, #0]
  }
}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8000f5c:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8000f60:	8b83      	ldrh	r3, [r0, #28]
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8000f62:	d005      	beq.n	8000f70 <I2C_FastModeDutyCycleConfig+0x14>
    I2Cx->CCR &= I2C_DutyCycle_2;
 8000f64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f68:	041b      	lsls	r3, r3, #16
 8000f6a:	0c1b      	lsrs	r3, r3, #16
 8000f6c:	8383      	strh	r3, [r0, #28]
 8000f6e:	4770      	bx	lr
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f76:	8383      	strh	r3, [r0, #28]
  }
}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000f7c:	b11a      	cbz	r2, 8000f86 <I2C_Send7bitAddress+0xa>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8000f7e:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000f82:	8201      	strh	r1, [r0, #16]
}
 8000f84:	4770      	bx	lr
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000f86:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
  I2Cx->DR = Address;
 8000f8a:	8201      	strh	r1, [r0, #16]
}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000f90:	8201      	strh	r1, [r0, #16]
}
 8000f92:	4770      	bx	lr

08000f94 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8000f94:	8a00      	ldrh	r0, [r0, #16]
}
 8000f96:	b2c0      	uxtb	r0, r0
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8000f9c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8000fa0:	8803      	ldrh	r3, [r0, #0]
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8000fa2:	d005      	beq.n	8000fb0 <I2C_NACKPositionConfig+0x14>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8000fa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000fa8:	041b      	lsls	r3, r3, #16
 8000faa:	0c1b      	lsrs	r3, r3, #16
 8000fac:	8003      	strh	r3, [r0, #0]
  }
}
 8000fae:	4770      	bx	lr
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fb6:	8003      	strh	r3, [r0, #0]
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8000fbc:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000fbe:	b121      	cbz	r1, 8000fca <I2C_TransmitPEC+0xe>
    I2Cx->CR1 |= I2C_CR1_PEC;
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fc6:	8003      	strh	r3, [r0, #0]
 8000fc8:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8000fca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000fce:	041b      	lsls	r3, r3, #16
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	8003      	strh	r3, [r0, #0]
  }
}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <I2C_PECPositionConfig>:
  * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
  *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
  *          is intended to used in I2C mode.
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 8000fd8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8000fdc:	8803      	ldrh	r3, [r0, #0]
 8000fde:	d005      	beq.n	8000fec <I2C_PECPositionConfig+0x14>
 8000fe0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000fe4:	041b      	lsls	r3, r3, #16
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	8003      	strh	r3, [r0, #0]
 8000fea:	4770      	bx	lr
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ff2:	8003      	strh	r3, [r0, #0]
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8000ff8:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000ffa:	b121      	cbz	r1, 8001006 <I2C_CalculatePEC+0xe>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	8003      	strh	r3, [r0, #0]
 8001004:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001006:	f023 0320 	bic.w	r3, r3, #32
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	8003      	strh	r3, [r0, #0]
  }
}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8001014:	8b00      	ldrh	r0, [r0, #24]
}
 8001016:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800101a:	4770      	bx	lr

0800101c <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800101c:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 800101e:	b121      	cbz	r1, 800102a <I2C_DMACmd+0xe>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001020:	b29b      	uxth	r3, r3
 8001022:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001026:	8083      	strh	r3, [r0, #4]
 8001028:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800102a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800102e:	041b      	lsls	r3, r3, #16
 8001030:	0c1b      	lsrs	r3, r3, #16
 8001032:	8083      	strh	r3, [r0, #4]
  }
}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001038:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 800103a:	b121      	cbz	r1, 8001046 <I2C_DMALastTransferCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_LAST;
 800103c:	b29b      	uxth	r3, r3
 800103e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001042:	8083      	strh	r3, [r0, #4]
 8001044:	4770      	bx	lr
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001046:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	0c1b      	lsrs	r3, r3, #16
 800104e:	8083      	strh	r3, [r0, #4]
  }
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <I2C_ReadRegister>:
  *     @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
  __IO uint32_t tmp = 0;
 8001054:	2300      	movs	r3, #0
{
 8001056:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001058:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800105a:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 800105c:	9b01      	ldr	r3, [sp, #4]
 800105e:	4419      	add	r1, r3
 8001060:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8001062:	9b01      	ldr	r3, [sp, #4]
 8001064:	8818      	ldrh	r0, [r3, #0]
}
 8001066:	b280      	uxth	r0, r0
 8001068:	b002      	add	sp, #8
 800106a:	4770      	bx	lr

0800106c <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800106c:	8883      	ldrh	r3, [r0, #4]
 800106e:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8001070:	b112      	cbz	r2, 8001078 <I2C_ITConfig+0xc>
    I2Cx->CR2 |= I2C_IT;
 8001072:	430b      	orrs	r3, r1
 8001074:	8083      	strh	r3, [r0, #4]
 8001076:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8001078:	ea23 0301 	bic.w	r3, r3, r1
 800107c:	8083      	strh	r3, [r0, #4]
  }
}
 800107e:	4770      	bx	lr

08001080 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001080:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8001082:	8b02      	ldrh	r2, [r0, #24]
  flag1 = I2Cx->SR1;
 8001084:	b29b      	uxth	r3, r3
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001086:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800108a:	400b      	ands	r3, r1
 800108c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8001090:	1a58      	subs	r0, r3, r1
 8001092:	fab0 f080 	clz	r0, r0
 8001096:	0940      	lsrs	r0, r0, #5
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800109c:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 800109e:	8b02      	ldrh	r2, [r0, #24]
  flag1 = I2Cx->SR1;
 80010a0:	b298      	uxth	r0, r3
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80010a2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16

  /* Return status */
  return lastevent;
}
 80010a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80010aa:	4770      	bx	lr

080010ac <I2C_GetFlagStatus>:
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80010ac:	2300      	movs	r3, #0
{
 80010ae:	b082      	sub	sp, #8
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80010b4:	0f0b      	lsrs	r3, r1, #28
  i2cxbase = (uint32_t)I2Cx;
 80010b6:	9001      	str	r0, [sp, #4]
  i2creg = I2C_FLAG >> 28;
 80010b8:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 80010ba:	9b00      	ldr	r3, [sp, #0]
  I2C_FLAG &= FLAG_MASK;
 80010bc:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
  if(i2creg != 0)
 80010c0:	b153      	cbz	r3, 80010d8 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80010c2:	9b01      	ldr	r3, [sp, #4]
 80010c4:	3314      	adds	r3, #20
 80010c6:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80010c8:	9b01      	ldr	r3, [sp, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	420b      	tst	r3, r1
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 80010ce:	bf14      	ite	ne
 80010d0:	2001      	movne	r0, #1
 80010d2:	2000      	moveq	r0, #0
 80010d4:	b002      	add	sp, #8
 80010d6:	4770      	bx	lr
    i2cxbase += 0x18;
 80010d8:	9b01      	ldr	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80010da:	0c09      	lsrs	r1, r1, #16
    i2cxbase += 0x18;
 80010dc:	3318      	adds	r3, #24
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	e7f2      	b.n	80010c8 <I2C_GetFlagStatus+0x1c>
 80010e2:	bf00      	nop

080010e4 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80010e4:	43c9      	mvns	r1, r1
 80010e6:	b289      	uxth	r1, r1
 80010e8:	8281      	strh	r1, [r0, #20]
}
 80010ea:	4770      	bx	lr

080010ec <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80010ec:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80010ee:	8a80      	ldrh	r0, [r0, #20]
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80010f0:	b29b      	uxth	r3, r3
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80010f2:	b280      	uxth	r0, r0
 80010f4:	4008      	ands	r0, r1
 80010f6:	d006      	beq.n	8001106 <I2C_GetITStatus+0x1a>
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80010f8:	ea03 4311 	and.w	r3, r3, r1, lsr #16
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80010fc:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 8001100:	bf14      	ite	ne
 8001102:	2001      	movne	r0, #1
 8001104:	2000      	moveq	r0, #0
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8001106:	4770      	bx	lr

08001108 <I2C_ClearITPendingBit>:
  * @note SB (Start Bit) is cleared by software sequence: a read operation to 
  *     I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *     I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8001108:	43c9      	mvns	r1, r1
 800110a:	b289      	uxth	r1, r1
 800110c:	8281      	strh	r1, [r0, #20]
 800110e:	4770      	bx	lr

08001110 <RCC_DeInit>:

  /* Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001110:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000100;
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <RCC_DeInit+0x34>)
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001114:	4a0c      	ldr	r2, [pc, #48]	@ (8001148 <RCC_DeInit+0x38>)
  RCC->CR |= (uint32_t)0x00000100;
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800111c:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800111e:	6899      	ldr	r1, [r3, #8]
 8001120:	400a      	ands	r2, r1
 8001122:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	f022 5288 	bic.w	r2, r2, #285212672	@ 0x11000000
 800112a:	f022 1201 	bic.w	r2, r2, #65537	@ 0x10001
 800112e:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001136:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	f422 027d 	bic.w	r2, r2, #16580608	@ 0xfd0000
 800113e:	609a      	str	r2, [r3, #8]
  RCC->CIR = 0x00000000;
 8001140:	60d8      	str	r0, [r3, #12]
}
 8001142:	4770      	bx	lr
 8001144:	40023800 	.word	0x40023800
 8001148:	88ffc00c 	.word	0x88ffc00c

0800114c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800114c:	2200      	movs	r2, #0
 800114e:	4b02      	ldr	r3, [pc, #8]	@ (8001158 <RCC_HSEConfig+0xc>)
 8001150:	709a      	strb	r2, [r3, #2]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001152:	7098      	strb	r0, [r3, #2]

}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <RCC_WaitForHSEStartUp>:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 800115c:	2300      	movs	r3, #0
{
 800115e:	b082      	sub	sp, #8
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <RCC_WaitForHSEStartUp+0x30>)
  __IO uint32_t StartUpCounter = 0;
 8001162:	9301      	str	r3, [sp, #4]
    statusreg = RCC->CR;
 8001164:	6813      	ldr	r3, [r2, #0]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001166:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
    StartUpCounter++;  
 800116a:	9b01      	ldr	r3, [sp, #4]
 800116c:	f103 0301 	add.w	r3, r3, #1
 8001170:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001172:	9b01      	ldr	r3, [sp, #4]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001174:	d005      	beq.n	8001182 <RCC_WaitForHSEStartUp+0x26>
    statusreg = RCC->CR;
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <RCC_WaitForHSEStartUp+0x30>)
 8001178:	6818      	ldr	r0, [r3, #0]
}
 800117a:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800117e:	b002      	add	sp, #8
 8001180:	4770      	bx	lr
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001182:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8001186:	d1ed      	bne.n	8001164 <RCC_WaitForHSEStartUp+0x8>
 8001188:	e7f5      	b.n	8001176 <RCC_WaitForHSEStartUp+0x1a>
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <RCC_AdjustMSICalibrationValue>:
  *(__IO uint8_t *) ICSCR_BYTE4_ADDRESS = MSICalibrationValue;  
 8001190:	4b01      	ldr	r3, [pc, #4]	@ (8001198 <RCC_AdjustMSICalibrationValue+0x8>)
 8001192:	71d8      	strb	r0, [r3, #7]
}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800

0800119c <RCC_MSIRangeConfig>:
  tmpreg = RCC->ICSCR;
 800119c:	4a03      	ldr	r2, [pc, #12]	@ (80011ac <RCC_MSIRangeConfig+0x10>)
 800119e:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_ICSCR_MSIRANGE;
 80011a0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
  tmpreg |= (uint32_t)RCC_MSIRange;
 80011a4:	4303      	orrs	r3, r0
  RCC->ICSCR = tmpreg;
 80011a6:	6053      	str	r3, [r2, #4]
}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <RCC_MSICmd>:
  *(__IO uint32_t *) CR_MSION_BB = (uint32_t)NewState;
 80011b0:	4b01      	ldr	r3, [pc, #4]	@ (80011b8 <RCC_MSICmd+0x8>)
 80011b2:	6218      	str	r0, [r3, #32]
}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	42470000 	.word	0x42470000

080011bc <RCC_AdjustHSICalibrationValue>:
  tmpreg = RCC->ICSCR;
 80011bc:	4a03      	ldr	r2, [pc, #12]	@ (80011cc <RCC_AdjustHSICalibrationValue+0x10>)
 80011be:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_ICSCR_HSITRIM;
 80011c0:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
  tmpreg |= (uint32_t)HSICalibrationValue << 8;
 80011c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  RCC->ICSCR = tmpreg;
 80011c8:	6053      	str	r3, [r2, #4]
}
 80011ca:	4770      	bx	lr
 80011cc:	40023800 	.word	0x40023800

080011d0 <RCC_HSICmd>:
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80011d0:	4b01      	ldr	r3, [pc, #4]	@ (80011d8 <RCC_HSICmd+0x8>)
 80011d2:	6018      	str	r0, [r3, #0]
}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	42470000 	.word	0x42470000

080011dc <RCC_LSEConfig>:
  *(__IO uint8_t *) CSR_BYTE2_ADDRESS = RCC_LSE_OFF;
 80011dc:	2200      	movs	r2, #0
 80011de:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <RCC_LSEConfig+0x10>)
 80011e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  *(__IO uint8_t *) CSR_BYTE2_ADDRESS = RCC_LSE;  
 80011e4:	f883 0035 	strb.w	r0, [r3, #53]	@ 0x35
}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <RCC_LSICmd>:
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80011f0:	4b01      	ldr	r3, [pc, #4]	@ (80011f8 <RCC_LSICmd+0x8>)
 80011f2:	f8c3 0680 	str.w	r0, [r3, #1664]	@ 0x680
}
 80011f6:	4770      	bx	lr
 80011f8:	42470000 	.word	0x42470000

080011fc <RCC_PLLConfig>:
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS = (uint8_t)(RCC_PLLSource | ((uint8_t)(RCC_PLLMul | (uint8_t)(RCC_PLLDiv))));
 80011fc:	4b02      	ldr	r3, [pc, #8]	@ (8001208 <RCC_PLLConfig+0xc>)
 80011fe:	4302      	orrs	r2, r0
 8001200:	4311      	orrs	r1, r2
 8001202:	7299      	strb	r1, [r3, #10]
}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <RCC_PLLCmd>:
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800120c:	4b01      	ldr	r3, [pc, #4]	@ (8001214 <RCC_PLLCmd+0x8>)
 800120e:	6618      	str	r0, [r3, #96]	@ 0x60
}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	42470000 	.word	0x42470000

08001218 <RCC_ClockSecuritySystemCmd>:
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001218:	4b01      	ldr	r3, [pc, #4]	@ (8001220 <RCC_ClockSecuritySystemCmd+0x8>)
 800121a:	6718      	str	r0, [r3, #112]	@ 0x70
}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	42470000 	.word	0x42470000

08001224 <RCC_LSEClockSecuritySystemCmd>:
  *(__IO uint32_t *) CSR_LSECSSON_BB = (uint32_t)NewState;
 8001224:	4b01      	ldr	r3, [pc, #4]	@ (800122c <RCC_LSEClockSecuritySystemCmd+0x8>)
 8001226:	f8c3 06ac 	str.w	r0, [r3, #1708]	@ 0x6ac
}
 800122a:	4770      	bx	lr
 800122c:	42470000 	.word	0x42470000

08001230 <RCC_MCOConfig>:
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS =  RCC_MCOSource | RCC_MCODiv; 
 8001230:	4b01      	ldr	r3, [pc, #4]	@ (8001238 <RCC_MCOConfig+0x8>)
 8001232:	4308      	orrs	r0, r1
 8001234:	72d8      	strb	r0, [r3, #11]
}
 8001236:	4770      	bx	lr
 8001238:	40023800 	.word	0x40023800

0800123c <RCC_SYSCLKConfig>:
  tmpreg = RCC->CFGR;
 800123c:	4a03      	ldr	r2, [pc, #12]	@ (800124c <RCC_SYSCLKConfig+0x10>)
 800123e:	6893      	ldr	r3, [r2, #8]
  tmpreg &= ~RCC_CFGR_SW;
 8001240:	f023 0303 	bic.w	r3, r3, #3
  tmpreg |= RCC_SYSCLKSource;
 8001244:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 8001246:	6093      	str	r3, [r2, #8]
}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <RCC_GetSYSCLKSource>:
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001250:	4b02      	ldr	r3, [pc, #8]	@ (800125c <RCC_GetSYSCLKSource+0xc>)
 8001252:	6898      	ldr	r0, [r3, #8]
}
 8001254:	f000 000c 	and.w	r0, r0, #12
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <RCC_HCLKConfig>:
  tmpreg = RCC->CFGR;
 8001260:	4a03      	ldr	r2, [pc, #12]	@ (8001270 <RCC_HCLKConfig+0x10>)
 8001262:	6893      	ldr	r3, [r2, #8]
  tmpreg &= ~RCC_CFGR_HPRE;
 8001264:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpreg |= RCC_SYSCLK;
 8001268:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 800126a:	6093      	str	r3, [r2, #8]
}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <RCC_PCLK1Config>:
  tmpreg = RCC->CFGR;
 8001274:	4a03      	ldr	r2, [pc, #12]	@ (8001284 <RCC_PCLK1Config+0x10>)
 8001276:	6893      	ldr	r3, [r2, #8]
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001278:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
  tmpreg |= RCC_HCLK;
 800127c:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 800127e:	6093      	str	r3, [r2, #8]
}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <RCC_PCLK2Config>:
  tmpreg = RCC->CFGR;
 8001288:	4a03      	ldr	r2, [pc, #12]	@ (8001298 <RCC_PCLK2Config+0x10>)
 800128a:	6893      	ldr	r3, [r2, #8]
  tmpreg &= ~RCC_CFGR_PPRE2;
 800128c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
  tmpreg |= RCC_HCLK << 3;
 8001290:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
  RCC->CFGR = tmpreg;
 8001294:	6093      	str	r3, [r2, #8]
}
 8001296:	4770      	bx	lr
 8001298:	40023800 	.word	0x40023800

0800129c <RCC_GetClocksFreq>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800129c:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <RCC_GetClocksFreq+0x9c>)
{
 800129e:	b410      	push	{r4}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 80012a6:	2b0c      	cmp	r3, #12
 80012a8:	d808      	bhi.n	80012bc <RCC_GetClocksFreq+0x20>
 80012aa:	e8df f003 	tbb	[pc, r3]
 80012ae:	0707      	.short	0x0707
 80012b0:	073f0707 	.word	0x073f0707
 80012b4:	07420707 	.word	0x07420707
 80012b8:	0707      	.short	0x0707
 80012ba:	2a          	.byte	0x2a
 80012bb:	00          	.byte	0x00
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80012bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80012c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001338 <RCC_GetClocksFreq+0x9c>)
 80012c2:	491e      	ldr	r1, [pc, #120]	@ (800133c <RCC_GetClocksFreq+0xa0>)
 80012c4:	6852      	ldr	r2, [r2, #4]
 80012c6:	f3c2 3242 	ubfx	r2, r2, #13, #3
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80012ca:	3201      	adds	r2, #1
 80012cc:	4093      	lsls	r3, r2
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80012ce:	4c1a      	ldr	r4, [pc, #104]	@ (8001338 <RCC_GetClocksFreq+0x9c>)
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80012d0:	6003      	str	r3, [r0, #0]
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80012d2:	68a2      	ldr	r2, [r4, #8]
  tmp = tmp >> 4;
 80012d4:	f3c2 1203 	ubfx	r2, r2, #4, #4
  presc = APBAHBPrescTable[tmp]; 
 80012d8:	440a      	add	r2, r1
 80012da:	7b12      	ldrb	r2, [r2, #12]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80012dc:	40d3      	lsrs	r3, r2
 80012de:	6043      	str	r3, [r0, #4]
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80012e0:	68a2      	ldr	r2, [r4, #8]
  tmp = tmp >> 8;
 80012e2:	f3c2 2202 	ubfx	r2, r2, #8, #3
  presc = APBAHBPrescTable[tmp];
 80012e6:	440a      	add	r2, r1
 80012e8:	7b12      	ldrb	r2, [r2, #12]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012ea:	fa23 f202 	lsr.w	r2, r3, r2
 80012ee:	6082      	str	r2, [r0, #8]
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80012f0:	68a2      	ldr	r2, [r4, #8]
}
 80012f2:	bc10      	pop	{r4}
  tmp = tmp >> 11;
 80012f4:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  presc = APBAHBPrescTable[tmp];
 80012f8:	4411      	add	r1, r2
 80012fa:	7b0a      	ldrb	r2, [r1, #12]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012fc:	40d3      	lsrs	r3, r2
 80012fe:	60c3      	str	r3, [r0, #12]
}
 8001300:	4770      	bx	lr
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001302:	4c0d      	ldr	r4, [pc, #52]	@ (8001338 <RCC_GetClocksFreq+0x9c>)
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001304:	490d      	ldr	r1, [pc, #52]	@ (800133c <RCC_GetClocksFreq+0xa0>)
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001306:	68a2      	ldr	r2, [r4, #8]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001308:	68a3      	ldr	r3, [r4, #8]
      pllmul = PLLMulTable[(pllmul >> 18)];
 800130a:	f3c2 4283 	ubfx	r2, r2, #18, #4
 800130e:	5c8a      	ldrb	r2, [r1, r2]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001310:	68a4      	ldr	r4, [r4, #8]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001312:	b2d2      	uxtb	r2, r2
      if (pllsource == 0x00)
 8001314:	03e4      	lsls	r4, r4, #15
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8001316:	bf54      	ite	pl
 8001318:	4c09      	ldrpl	r4, [pc, #36]	@ (8001340 <RCC_GetClocksFreq+0xa4>)
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 800131a:	4c0a      	ldrmi	r4, [pc, #40]	@ (8001344 <RCC_GetClocksFreq+0xa8>)
      plldiv = (plldiv >> 22) + 1;
 800131c:	f3c3 5381 	ubfx	r3, r3, #22, #2
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8001320:	fb04 f202 	mul.w	r2, r4, r2
      plldiv = (plldiv >> 22) + 1;
 8001324:	3301      	adds	r3, #1
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	e7d0      	b.n	80012ce <RCC_GetClocksFreq+0x32>
  switch (tmp)
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <RCC_GetClocksFreq+0xa4>)
 800132e:	4903      	ldr	r1, [pc, #12]	@ (800133c <RCC_GetClocksFreq+0xa0>)
 8001330:	e7cd      	b.n	80012ce <RCC_GetClocksFreq+0x32>
 8001332:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <RCC_GetClocksFreq+0xa8>)
 8001334:	4901      	ldr	r1, [pc, #4]	@ (800133c <RCC_GetClocksFreq+0xa0>)
 8001336:	e7ca      	b.n	80012ce <RCC_GetClocksFreq+0x32>
 8001338:	40023800 	.word	0x40023800
 800133c:	08002090 	.word	0x08002090
 8001340:	00f42400 	.word	0x00f42400
 8001344:	007a1200 	.word	0x007a1200

08001348 <RCC_RTCCLKConfig>:
  if ((RCC_RTCCLKSource & RCC_CSR_RTCSEL_HSE) == RCC_CSR_RTCSEL_HSE)
 8001348:	f400 3240 	and.w	r2, r0, #196608	@ 0x30000
 800134c:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 8001350:	d107      	bne.n	8001362 <RCC_RTCCLKConfig+0x1a>
    tmpreg = RCC->CR;
 8001352:	4908      	ldr	r1, [pc, #32]	@ (8001374 <RCC_RTCCLKConfig+0x2c>)
    tmpreg |= (RCC_RTCCLKSource & RCC_CR_RTCPRE);
 8001354:	f000 40c0 	and.w	r0, r0, #1610612736	@ 0x60000000
    tmpreg = RCC->CR;
 8001358:	680b      	ldr	r3, [r1, #0]
    tmpreg &= ~RCC_CR_RTCPRE;
 800135a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
    tmpreg |= (RCC_RTCCLKSource & RCC_CR_RTCPRE);
 800135e:	4318      	orrs	r0, r3
    RCC->CR = tmpreg;
 8001360:	6008      	str	r0, [r1, #0]
  RCC->CSR &= ~RCC_CSR_RTCSEL;
 8001362:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <RCC_RTCCLKConfig+0x2c>)
 8001364:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001366:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 800136a:	6359      	str	r1, [r3, #52]	@ 0x34
  RCC->CSR |= (RCC_RTCCLKSource & RCC_CSR_RTCSEL);
 800136c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001372:	4770      	bx	lr
 8001374:	40023800 	.word	0x40023800

08001378 <RCC_RTCCLKCmd>:
  *(__IO uint32_t *) CSR_RTCEN_BB = (uint32_t)NewState;
 8001378:	4b01      	ldr	r3, [pc, #4]	@ (8001380 <RCC_RTCCLKCmd+0x8>)
 800137a:	f8c3 06d8 	str.w	r0, [r3, #1752]	@ 0x6d8
}
 800137e:	4770      	bx	lr
 8001380:	42470000 	.word	0x42470000

08001384 <RCC_RTCResetCmd>:
  *(__IO uint32_t *) CSR_RTCRST_BB = (uint32_t)NewState;
 8001384:	4b01      	ldr	r3, [pc, #4]	@ (800138c <RCC_RTCResetCmd+0x8>)
 8001386:	f8c3 06dc 	str.w	r0, [r3, #1756]	@ 0x6dc
}
 800138a:	4770      	bx	lr
 800138c:	42470000 	.word	0x42470000

08001390 <RCC_AHBPeriphClockCmd>:
    RCC->AHBENR |= RCC_AHBPeriph;
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <RCC_AHBPeriphClockCmd+0x14>)
 8001392:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 8001394:	b111      	cbz	r1, 800139c <RCC_AHBPeriphClockCmd+0xc>
    RCC->AHBENR |= RCC_AHBPeriph;
 8001396:	4303      	orrs	r3, r0
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4770      	bx	lr
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800139c:	ea23 0300 	bic.w	r3, r3, r0
 80013a0:	61d3      	str	r3, [r2, #28]
}
 80013a2:	4770      	bx	lr
 80013a4:	40023800 	.word	0x40023800

080013a8 <RCC_APB2PeriphClockCmd>:
    RCC->APB2ENR |= RCC_APB2Periph;
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <RCC_APB2PeriphClockCmd+0x14>)
 80013aa:	6a13      	ldr	r3, [r2, #32]
  if (NewState != DISABLE)
 80013ac:	b111      	cbz	r1, 80013b4 <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 80013ae:	4303      	orrs	r3, r0
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013b4:	ea23 0300 	bic.w	r3, r3, r0
 80013b8:	6213      	str	r3, [r2, #32]
}
 80013ba:	4770      	bx	lr
 80013bc:	40023800 	.word	0x40023800

080013c0 <RCC_APB1PeriphClockCmd>:
    RCC->APB1ENR |= RCC_APB1Periph;
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <RCC_APB1PeriphClockCmd+0x14>)
 80013c2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
  if (NewState != DISABLE)
 80013c4:	b111      	cbz	r1, 80013cc <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 80013c6:	4303      	orrs	r3, r0
 80013c8:	6253      	str	r3, [r2, #36]	@ 0x24
 80013ca:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80013cc:	ea23 0300 	bic.w	r3, r3, r0
 80013d0:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80013d2:	4770      	bx	lr
 80013d4:	40023800 	.word	0x40023800

080013d8 <RCC_AHBPeriphResetCmd>:
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80013d8:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <RCC_AHBPeriphResetCmd+0x14>)
 80013da:	6913      	ldr	r3, [r2, #16]
  if (NewState != DISABLE)
 80013dc:	b111      	cbz	r1, 80013e4 <RCC_AHBPeriphResetCmd+0xc>
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80013de:	4303      	orrs	r3, r0
 80013e0:	6113      	str	r3, [r2, #16]
 80013e2:	4770      	bx	lr
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 80013e4:	ea23 0300 	bic.w	r3, r3, r0
 80013e8:	6113      	str	r3, [r2, #16]
}
 80013ea:	4770      	bx	lr
 80013ec:	40023800 	.word	0x40023800

080013f0 <RCC_APB2PeriphResetCmd>:
    RCC->APB2RSTR |= RCC_APB2Periph;
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <RCC_APB2PeriphResetCmd+0x14>)
 80013f2:	6953      	ldr	r3, [r2, #20]
  if (NewState != DISABLE)
 80013f4:	b111      	cbz	r1, 80013fc <RCC_APB2PeriphResetCmd+0xc>
    RCC->APB2RSTR |= RCC_APB2Periph;
 80013f6:	4303      	orrs	r3, r0
 80013f8:	6153      	str	r3, [r2, #20]
 80013fa:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80013fc:	ea23 0300 	bic.w	r3, r3, r0
 8001400:	6153      	str	r3, [r2, #20]
}
 8001402:	4770      	bx	lr
 8001404:	40023800 	.word	0x40023800

08001408 <RCC_APB1PeriphResetCmd>:
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <RCC_APB1PeriphResetCmd+0x14>)
 800140a:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 800140c:	b111      	cbz	r1, 8001414 <RCC_APB1PeriphResetCmd+0xc>
    RCC->APB1RSTR |= RCC_APB1Periph;
 800140e:	4303      	orrs	r3, r0
 8001410:	6193      	str	r3, [r2, #24]
 8001412:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001414:	ea23 0300 	bic.w	r3, r3, r0
 8001418:	6193      	str	r3, [r2, #24]
}
 800141a:	4770      	bx	lr
 800141c:	40023800 	.word	0x40023800

08001420 <RCC_AHBPeriphClockLPModeCmd>:
    RCC->AHBLPENR |= RCC_AHBPeriph;
 8001420:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <RCC_AHBPeriphClockLPModeCmd+0x14>)
 8001422:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  if (NewState != DISABLE)
 8001424:	b111      	cbz	r1, 800142c <RCC_AHBPeriphClockLPModeCmd+0xc>
    RCC->AHBLPENR |= RCC_AHBPeriph;
 8001426:	4303      	orrs	r3, r0
 8001428:	6293      	str	r3, [r2, #40]	@ 0x28
 800142a:	4770      	bx	lr
    RCC->AHBLPENR &= ~RCC_AHBPeriph;
 800142c:	ea23 0300 	bic.w	r3, r3, r0
 8001430:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001432:	4770      	bx	lr
 8001434:	40023800 	.word	0x40023800

08001438 <RCC_APB2PeriphClockLPModeCmd>:
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <RCC_APB2PeriphClockLPModeCmd+0x14>)
 800143a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
  if (NewState != DISABLE)
 800143c:	b111      	cbz	r1, 8001444 <RCC_APB2PeriphClockLPModeCmd+0xc>
    RCC->APB2LPENR |= RCC_APB2Periph;
 800143e:	4303      	orrs	r3, r0
 8001440:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001442:	4770      	bx	lr
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001444:	ea23 0300 	bic.w	r3, r3, r0
 8001448:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800144a:	4770      	bx	lr
 800144c:	40023800 	.word	0x40023800

08001450 <RCC_APB1PeriphClockLPModeCmd>:
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <RCC_APB1PeriphClockLPModeCmd+0x14>)
 8001452:	6b13      	ldr	r3, [r2, #48]	@ 0x30
  if (NewState != DISABLE)
 8001454:	b111      	cbz	r1, 800145c <RCC_APB1PeriphClockLPModeCmd+0xc>
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001456:	4303      	orrs	r3, r0
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4770      	bx	lr
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800145c:	ea23 0300 	bic.w	r3, r3, r0
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001462:	4770      	bx	lr
 8001464:	40023800 	.word	0x40023800

08001468 <RCC_ITConfig>:
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <RCC_ITConfig+0x14>)
 800146a:	7b53      	ldrb	r3, [r2, #13]
  if (NewState != DISABLE)
 800146c:	b111      	cbz	r1, 8001474 <RCC_ITConfig+0xc>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800146e:	4303      	orrs	r3, r0
 8001470:	7353      	strb	r3, [r2, #13]
 8001472:	4770      	bx	lr
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001474:	ea23 0300 	bic.w	r3, r3, r0
 8001478:	7353      	strb	r3, [r2, #13]
}
 800147a:	4770      	bx	lr
 800147c:	40023800 	.word	0x40023800

08001480 <RCC_GetFlagStatus>:
  if (tmp == 1)               /* The flag to check is in CR register */
 8001480:	0943      	lsrs	r3, r0, #5
 8001482:	2b01      	cmp	r3, #1
    statusreg = RCC->CR;
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <RCC_GetFlagStatus+0x1c>)
  tmp = RCC_FLAG & FLAG_MASK;
 8001486:	f000 001f 	and.w	r0, r0, #31
    statusreg = RCC->CR;
 800148a:	bf0c      	ite	eq
 800148c:	681b      	ldreq	r3, [r3, #0]
    statusreg = RCC->CSR;
 800148e:	6b5b      	ldrne	r3, [r3, #52]	@ 0x34
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001490:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001494:	f000 0001 	and.w	r0, r0, #1
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80014a0:	4a02      	ldr	r2, [pc, #8]	@ (80014ac <RCC_ClearFlag+0xc>)
 80014a2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80014a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014a8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80014aa:	4770      	bx	lr
 80014ac:	40023800 	.word	0x40023800

080014b0 <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80014b0:	4b03      	ldr	r3, [pc, #12]	@ (80014c0 <RCC_GetITStatus+0x10>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 80014b6:	bf14      	ite	ne
 80014b8:	2001      	movne	r0, #1
 80014ba:	2000      	moveq	r0, #0
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80014c4:	4b01      	ldr	r3, [pc, #4]	@ (80014cc <RCC_ClearITPendingBit+0x8>)
 80014c6:	7398      	strb	r0, [r3, #14]
}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800

080014d0 <SPI_I2S_DeInit>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *               in SPI mode or 2 or 3 in I2S mode.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80014d0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <SPI_I2S_DeInit+0x60>)
 80014d4:	4298      	cmp	r0, r3
 80014d6:	d006      	beq.n	80014e6 <SPI_I2S_DeInit+0x16>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <SPI_I2S_DeInit+0x64>)
 80014da:	4298      	cmp	r0, r3
 80014dc:	d00f      	beq.n	80014fe <SPI_I2S_DeInit+0x2e>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  else
  {
    if (SPIx == SPI3)
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <SPI_I2S_DeInit+0x68>)
 80014e0:	4298      	cmp	r0, r3
 80014e2:	d018      	beq.n	8001516 <SPI_I2S_DeInit+0x46>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 80014e4:	bd08      	pop	{r3, pc}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80014e6:	2101      	movs	r1, #1
 80014e8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80014ec:	f7ff ff80 	bl	80013f0 <RCC_APB2PeriphResetCmd>
}
 80014f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80014f4:	2100      	movs	r1, #0
 80014f6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80014fa:	f7ff bf79 	b.w	80013f0 <RCC_APB2PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80014fe:	2101      	movs	r1, #1
 8001500:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001504:	f7ff ff80 	bl	8001408 <RCC_APB1PeriphResetCmd>
}
 8001508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800150c:	2100      	movs	r1, #0
 800150e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001512:	f7ff bf79 	b.w	8001408 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001516:	2101      	movs	r1, #1
 8001518:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800151c:	f7ff ff74 	bl	8001408 <RCC_APB1PeriphResetCmd>
}
 8001520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001524:	2100      	movs	r1, #0
 8001526:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800152a:	f7ff bf6d 	b.w	8001408 <RCC_APB1PeriphResetCmd>
 800152e:	bf00      	nop
 8001530:	40013000 	.word	0x40013000
 8001534:	40003800 	.word	0x40003800
 8001538:	40003c00 	.word	0x40003c00

0800153c <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800153c:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8001540:	880b      	ldrh	r3, [r1, #0]
 8001542:	888a      	ldrh	r2, [r1, #4]
 8001544:	ea43 030c 	orr.w	r3, r3, ip
 8001548:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800154c:	4313      	orrs	r3, r2
 800154e:	890a      	ldrh	r2, [r1, #8]
 8001550:	ea43 030c 	orr.w	r3, r3, ip
{
 8001554:	b500      	push	{lr}
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001556:	f8b1 e00a 	ldrh.w	lr, [r1, #10]
 800155a:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	ea43 030e 	orr.w	r3, r3, lr
  tmpreg = SPIx->CR1;
 8001564:	8802      	ldrh	r2, [r0, #0]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001566:	ea43 030c 	orr.w	r3, r3, ip
 800156a:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
  tmpreg &= CR1_CLEAR_MASK;
 800156e:	f402 5241 	and.w	r2, r2, #12352	@ 0x3040
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001572:	ea43 030c 	orr.w	r3, r3, ip
 8001576:	4313      	orrs	r3, r2
 8001578:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800157a:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800157c:	8b83      	ldrh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800157e:	8a0a      	ldrh	r2, [r1, #16]
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001580:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	8383      	strh	r3, [r0, #28]
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800158a:	8202      	strh	r2, [r0, #16]
}
 800158c:	f85d fb04 	ldr.w	pc, [sp], #4

08001590 <I2S_Init>:
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.     
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
 8001592:	2402      	movs	r4, #2
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8001594:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001596:	688a      	ldr	r2, [r1, #8]
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8001598:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800159c:	f023 030f 	bic.w	r3, r3, #15
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	0c1b      	lsrs	r3, r3, #16
 80015a4:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 80015a6:	8404      	strh	r4, [r0, #32]
  tmpreg = SPIx->I2SCFGR;
 80015a8:	8b84      	ldrh	r4, [r0, #28]
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80015aa:	2a02      	cmp	r2, #2
{
 80015ac:	4606      	mov	r6, r0
 80015ae:	460d      	mov	r5, r1
 80015b0:	b085      	sub	sp, #20
  tmpreg = SPIx->I2SCFGR;
 80015b2:	b2a4      	uxth	r4, r4
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80015b4:	d03d      	beq.n	8001632 <I2S_Init+0xa2>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80015b6:	888b      	ldrh	r3, [r1, #4]
      /* Packet length is 32 bits */
      packetlength = 2;
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 80015b8:	4668      	mov	r0, sp
      packetlength = 1;
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2702      	movne	r7, #2
 80015c0:	2701      	moveq	r7, #1
    RCC_GetClocksFreq(&RCC_Clocks);      
 80015c2:	f7ff fe6b 	bl	800129c <RCC_GetClocksFreq>
      
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
   
    /* Compute the Real divider depending on the MCLK output state with a flaoting point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80015c6:	88ea      	ldrh	r2, [r5, #6]
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 80015c8:	9b00      	ldr	r3, [sp, #0]
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80015ca:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80015ce:	d026      	beq.n	800161e <I2S_Init+0x8e>
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80015d0:	017f      	lsls	r7, r7, #5
 80015d2:	fbb3 f3f7 	udiv	r3, r3, r7
 80015d6:	68a9      	ldr	r1, [r5, #8]
 80015d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	3305      	adds	r3, #5
 80015e4:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flaoting point */
    tmp = tmp / 10;  
 80015e6:	4914      	ldr	r1, [pc, #80]	@ (8001638 <I2S_Init+0xa8>)
 80015e8:	fba1 1303 	umull	r1, r3, r1, r3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80015ec:	0919      	lsrs	r1, r3, #4
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80015ee:	1e88      	subs	r0, r1, #2
 80015f0:	28fd      	cmp	r0, #253	@ 0xfd
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80015f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80015f6:	bf8c      	ite	hi
 80015f8:	2302      	movhi	r3, #2
 80015fa:	ea41 2303 	orrls.w	r3, r1, r3, lsl #8
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 80015fe:	431a      	orrs	r2, r3
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001600:	882b      	ldrh	r3, [r5, #0]
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 8001602:	8432      	strh	r2, [r6, #32]
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001604:	886a      	ldrh	r2, [r5, #2]
 8001606:	88a9      	ldrh	r1, [r5, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	4323      	orrs	r3, r4
 800160c:	89aa      	ldrh	r2, [r5, #12]
 800160e:	430b      	orrs	r3, r1
 8001610:	4313      	orrs	r3, r2
 8001612:	b29b      	uxth	r3, r3
 8001614:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
 8001618:	83b3      	strh	r3, [r6, #28]
}
 800161a:	b005      	add	sp, #20
 800161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	68a9      	ldr	r1, [r5, #8]
 8001622:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fbb3 f3f1 	udiv	r3, r3, r1
 800162c:	3305      	adds	r3, #5
 800162e:	b29b      	uxth	r3, r3
 8001630:	e7d9      	b.n	80015e6 <I2S_Init+0x56>
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 8001632:	4613      	mov	r3, r2
 8001634:	88ca      	ldrh	r2, [r1, #6]
 8001636:	e7e2      	b.n	80015fe <I2S_Init+0x6e>
 8001638:	cccccccd 	.word	0xcccccccd

0800163c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800163c:	2300      	movs	r3, #0
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800163e:	2207      	movs	r2, #7
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001640:	6003      	str	r3, [r0, #0]
 8001642:	6043      	str	r3, [r0, #4]
 8001644:	6083      	str	r3, [r0, #8]
 8001646:	60c3      	str	r3, [r0, #12]
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001648:	8202      	strh	r2, [r0, #16]
}
 800164a:	4770      	bx	lr

0800164c <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800164c:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800164e:	2202      	movs	r2, #2
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001650:	e9c0 3300 	strd	r3, r3, [r0]
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001654:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8001656:	8183      	strh	r3, [r0, #12]
}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop

0800165c <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800165c:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 800165e:	b121      	cbz	r1, 800166a <SPI_Cmd+0xe>
    SPIx->CR1 |= SPI_CR1_SPE;
 8001660:	b29b      	uxth	r3, r3
 8001662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001666:	8003      	strh	r3, [r0, #0]
 8001668:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800166a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800166e:	041b      	lsls	r3, r3, #16
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	8003      	strh	r3, [r0, #0]
  }
}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop

08001678 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001678:	8b83      	ldrh	r3, [r0, #28]
  if (NewState != DISABLE)
 800167a:	b121      	cbz	r1, 8001686 <I2S_Cmd+0xe>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800167c:	b29b      	uxth	r3, r3
 800167e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001682:	8383      	strh	r3, [r0, #28]
 8001684:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001686:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	0c1b      	lsrs	r3, r3, #16
 800168e:	8383      	strh	r3, [r0, #28]
  }
}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop

08001694 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8001694:	8803      	ldrh	r3, [r0, #0]
 8001696:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 80016a0:	8803      	ldrh	r3, [r0, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	430b      	orrs	r3, r1
 80016a6:	8003      	strh	r3, [r0, #0]
}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop

080016ac <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 80016ac:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80016b0:	8803      	ldrh	r3, [r0, #0]
  if (SPI_Direction == SPI_Direction_Tx)
 80016b2:	d005      	beq.n	80016c0 <SPI_BiDirectionalLineConfig+0x14>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 80016b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	0c1b      	lsrs	r3, r3, #16
 80016bc:	8003      	strh	r3, [r0, #0]
  }
}
 80016be:	4770      	bx	lr
    SPIx->CR1 |= SPI_Direction_Tx;
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c6:	8003      	strh	r3, [r0, #0]
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop

080016cc <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80016cc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80016d0:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80016d2:	8803      	ldrh	r3, [r0, #0]
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80016d4:	d004      	beq.n	80016e0 <SPI_NSSInternalSoftwareConfig+0x14>
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016dc:	8003      	strh	r3, [r0, #0]
 80016de:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80016e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	0c1b      	lsrs	r3, r3, #16
 80016e8:	8003      	strh	r3, [r0, #0]
  }
}
 80016ea:	4770      	bx	lr

080016ec <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80016ec:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 80016ee:	b121      	cbz	r1, 80016fa <SPI_SSOutputCmd+0xe>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	8083      	strh	r3, [r0, #4]
 80016f8:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	0c1b      	lsrs	r3, r3, #16
 8001702:	8083      	strh	r3, [r0, #4]
  }
}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop

08001708 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001708:	8980      	ldrh	r0, [r0, #12]
}
 800170a:	b280      	uxth	r0, r0
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop

08001710 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001710:	8181      	strh	r1, [r0, #12]
}
 8001712:	4770      	bx	lr

08001714 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001714:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001716:	b121      	cbz	r1, 8001722 <SPI_CalculateCRC+0xe>
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001718:	b29b      	uxth	r3, r3
 800171a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800171e:	8003      	strh	r3, [r0, #0]
 8001720:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8001722:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	0c1b      	lsrs	r3, r3, #16
 800172a:	8003      	strh	r3, [r0, #0]
  }
}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop

08001730 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8001730:	8803      	ldrh	r3, [r0, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001738:	8003      	strh	r3, [r0, #0]
}
 800173a:	4770      	bx	lr

0800173c <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800173c:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800173e:	bf14      	ite	ne
 8001740:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8001742:	8a80      	ldrheq	r0, [r0, #20]
 8001744:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8001746:	4770      	bx	lr

08001748 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8001748:	8a00      	ldrh	r0, [r0, #16]
}
 800174a:	b280      	uxth	r0, r0
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001750:	8883      	ldrh	r3, [r0, #4]
 8001752:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8001754:	b112      	cbz	r2, 800175c <SPI_I2S_DMACmd+0xc>
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001756:	430b      	orrs	r3, r1
 8001758:	8083      	strh	r3, [r0, #4]
 800175a:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800175c:	ea23 0301 	bic.w	r3, r3, r1
 8001760:	8083      	strh	r3, [r0, #4]
  }
}
 8001762:	4770      	bx	lr

08001764 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8001764:	2301      	movs	r3, #1
 8001766:	0909      	lsrs	r1, r1, #4
 8001768:	408b      	lsls	r3, r1
 800176a:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 800176c:	b122      	cbz	r2, 8001778 <SPI_I2S_ITConfig+0x14>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800176e:	8882      	ldrh	r2, [r0, #4]
 8001770:	b292      	uxth	r2, r2
 8001772:	4313      	orrs	r3, r2
 8001774:	8083      	strh	r3, [r0, #4]
 8001776:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8001778:	8882      	ldrh	r2, [r0, #4]
 800177a:	b292      	uxth	r2, r2
 800177c:	ea22 0303 	bic.w	r3, r2, r3
 8001780:	8083      	strh	r3, [r0, #4]
  }
}
 8001782:	4770      	bx	lr

08001784 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001784:	8903      	ldrh	r3, [r0, #8]
 8001786:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8001788:	bf14      	ite	ne
 800178a:	2001      	movne	r0, #1
 800178c:	2000      	moveq	r0, #0
 800178e:	4770      	bx	lr

08001790 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8001790:	43c9      	mvns	r1, r1
 8001792:	b289      	uxth	r1, r1
 8001794:	8101      	strh	r1, [r0, #8]
}
 8001796:	4770      	bx	lr

08001798 <SPI_I2S_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001798:	2201      	movs	r2, #1

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800179a:	8883      	ldrh	r3, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800179c:	8900      	ldrh	r0, [r0, #8]
  enablestatus = (SPIx->CR2 & itmask) ;
 800179e:	fa1f fc83 	uxth.w	ip, r3
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80017a2:	f001 030f 	and.w	r3, r1, #15
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80017a6:	b280      	uxth	r0, r0
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80017ac:	4018      	ands	r0, r3
 80017ae:	d006      	beq.n	80017be <SPI_I2S_GetITStatus+0x26>
  itmask = 0x01 << itmask;
 80017b0:	0909      	lsrs	r1, r1, #4
 80017b2:	408a      	lsls	r2, r1
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80017b4:	ea1c 0f02 	tst.w	ip, r2
 80017b8:	bf14      	ite	ne
 80017ba:	2001      	movne	r0, #1
 80017bc:	2000      	moveq	r0, #0
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 80017be:	4770      	bx	lr

080017c0 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80017c0:	2301      	movs	r3, #1
 80017c2:	f001 010f 	and.w	r1, r1, #15
 80017c6:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 80017c8:	43db      	mvns	r3, r3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	8103      	strh	r3, [r0, #8]
}
 80017ce:	4770      	bx	lr

080017d0 <SYSCFG_DeInit>:
  * @retval None.
  * @Note: MEMRMP bits are not reset by APB2 reset.
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80017d0:	2101      	movs	r1, #1
{
 80017d2:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80017d4:	4608      	mov	r0, r1
 80017d6:	f7ff fe0b 	bl	80013f0 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
}
 80017da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80017de:	2100      	movs	r1, #0
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff be05 	b.w	80013f0 <RCC_APB2PeriphResetCmd>
 80017e6:	bf00      	nop

080017e8 <SYSCFG_RIDeInit>:
  * @param  None.
  * @retval None.
  */
void SYSCFG_RIDeInit(void)
{
  RI->ICR     = ((uint32_t)0x00000000);    /*!< Set RI->ICR to reset value */
 80017e8:	2200      	movs	r2, #0
 80017ea:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <SYSCFG_RIDeInit+0x14>)
 80017ec:	605a      	str	r2, [r3, #4]
  RI->ASCR1   = ((uint32_t)0x00000000);    /*!< Set RI->ASCR1 to reset value */
 80017ee:	609a      	str	r2, [r3, #8]
  RI->ASCR2   = ((uint32_t)0x00000000);    /*!< Set RI->ASCR2 to reset value */
 80017f0:	60da      	str	r2, [r3, #12]
  RI->HYSCR1  = ((uint32_t)0x00000000);    /*!< Set RI->HYSCR1 to reset value */
 80017f2:	611a      	str	r2, [r3, #16]
  RI->HYSCR2  = ((uint32_t)0x00000000);    /*!< Set RI->HYSCR2 to reset value */
 80017f4:	615a      	str	r2, [r3, #20]
  RI->HYSCR3  = ((uint32_t)0x00000000);    /*!< Set RI->HYSCR3 to reset value */
 80017f6:	619a      	str	r2, [r3, #24]
  RI->HYSCR4  = ((uint32_t)0x00000000);    /*!< Set RI->HYSCR4 to reset value */
 80017f8:	61da      	str	r2, [r3, #28]
}
 80017fa:	4770      	bx	lr
 80017fc:	40007c00 	.word	0x40007c00

08001800 <SYSCFG_MemoryRemapConfig>:
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));
  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8001800:	4b01      	ldr	r3, [pc, #4]	@ (8001808 <SYSCFG_MemoryRemapConfig+0x8>)
 8001802:	6018      	str	r0, [r3, #0]
}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40010000 	.word	0x40010000

0800180c <SYSCFG_GetBootMode>:
  *              - 0x00000200: Boot is configured in FSMC memory
  *              - 0x00000300: Boot is configured in Embedded SRAM memory
  */
uint32_t SYSCFG_GetBootMode(void)
{
  return (SYSCFG->MEMRMP & SYSCFG_MEMRMP_BOOT_MODE);
 800180c:	4b02      	ldr	r3, [pc, #8]	@ (8001818 <SYSCFG_GetBootMode+0xc>)
 800180e:	6818      	ldr	r0, [r3, #0]
}
 8001810:	f400 7040 	and.w	r0, r0, #768	@ 0x300
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40010000 	.word	0x40010000

0800181c <SYSCFG_USBPuCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Connect internal pull-up on USB DP line */
    SYSCFG->PMC |= (uint32_t) SYSCFG_PMC_USB_PU;
 800181c:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <SYSCFG_USBPuCmd+0x18>)
 800181e:	6853      	ldr	r3, [r2, #4]
  if (NewState != DISABLE)
 8001820:	b118      	cbz	r0, 800182a <SYSCFG_USBPuCmd+0xe>
    SYSCFG->PMC |= (uint32_t) SYSCFG_PMC_USB_PU;
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6053      	str	r3, [r2, #4]
 8001828:	4770      	bx	lr
  }
  else
  {
    /* Disconnect internal pull-up on USB DP line */
    SYSCFG->PMC &= (uint32_t)(~SYSCFG_PMC_USB_PU);
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6053      	str	r3, [r2, #4]
  }
}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40010000 	.word	0x40010000

08001838 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001838:	f04f 0c0f 	mov.w	ip, #15
 800183c:	f001 03fc 	and.w	r3, r1, #252	@ 0xfc
 8001840:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001844:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001848:	f001 0103 	and.w	r1, r1, #3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800184c:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800184e:	0089      	lsls	r1, r1, #2
 8001850:	fa0c fc01 	lsl.w	ip, ip, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001854:	ea22 020c 	bic.w	r2, r2, ip
 8001858:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	4088      	lsls	r0, r1
 800185e:	4310      	orrs	r0, r2
 8001860:	6098      	str	r0, [r3, #8]
}
 8001862:	4770      	bx	lr

08001864 <SYSCFG_RITIMSelect>:

  /* Check the parameters */
  assert_param(IS_RI_TIM(TIM_Select));

  /* Get the old register value */
  tmpreg = RI->ICR;
 8001864:	4a03      	ldr	r2, [pc, #12]	@ (8001874 <SYSCFG_RITIMSelect+0x10>)
 8001866:	6853      	ldr	r3, [r2, #4]

  /* Clear the TIMx select bits */
  tmpreg &= TIM_SELECT_MASK;
 8001868:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000

  /* Select the Timer */
  tmpreg |= (TIM_Select);
 800186c:	4303      	orrs	r3, r0

  /* Write to RI->ICR register */
  RI->ICR = tmpreg;
 800186e:	6053      	str	r3, [r2, #4]
}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40007c00 	.word	0x40007c00

08001878 <SYSCFG_RITIMInputCaptureConfig>:
  /* Check the parameters */
  assert_param(IS_RI_INPUTCAPTURE(RI_InputCapture));
  assert_param(IS_RI_INPUTCAPTURE_ROUTING(RI_InputCaptureRouting));

  /* Get the old register value */
  tmpreg = RI->ICR;
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <SYSCFG_RITIMInputCaptureConfig+0x40>)

  /* Select input captures to be routed */
  tmpreg |= (RI_InputCapture);

  if((RI_InputCapture & RI_InputCapture_IC1) == RI_InputCapture_IC1)
 800187a:	0342      	lsls	r2, r0, #13
  tmpreg = RI->ICR;
 800187c:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (RI_InputCapture);
 800187e:	ea43 0300 	orr.w	r3, r3, r0
  {
    /* Clear the input capture select bits */
    tmpreg &= (uint32_t)(~IC_ROUTING_MASK);
 8001882:	bf44      	itt	mi
 8001884:	f023 030f 	bicmi.w	r3, r3, #15

    /* Set RI_InputCaptureRouting bits  */
    tmpreg |= (uint32_t)( RI_InputCaptureRouting);
 8001888:	430b      	orrmi	r3, r1
  }

  if((RI_InputCapture & RI_InputCapture_IC2) == RI_InputCapture_IC2)
 800188a:	0302      	lsls	r2, r0, #12
  {
    /* Clear the input capture select bits */
    tmpreg &= (uint32_t)(~(IC_ROUTING_MASK << 4));
 800188c:	bf44      	itt	mi
 800188e:	f023 03f0 	bicmi.w	r3, r3, #240	@ 0xf0

    /* Set RI_InputCaptureRouting bits  */
    tmpreg |= (uint32_t)( (RI_InputCaptureRouting << 4));
 8001892:	ea43 1301 	orrmi.w	r3, r3, r1, lsl #4
  }

  if((RI_InputCapture & RI_InputCapture_IC3) == RI_InputCapture_IC3)
 8001896:	02c2      	lsls	r2, r0, #11
  {
    /* Clear the input capture select bits */
    tmpreg &= (uint32_t)(~(IC_ROUTING_MASK << 8));
 8001898:	bf44      	itt	mi
 800189a:	f423 6370 	bicmi.w	r3, r3, #3840	@ 0xf00

    /* Set RI_InputCaptureRouting bits  */
    tmpreg |= (uint32_t)( (RI_InputCaptureRouting << 8));
 800189e:	ea43 2301 	orrmi.w	r3, r3, r1, lsl #8
  }

  if((RI_InputCapture & RI_InputCapture_IC4) == RI_InputCapture_IC4)
 80018a2:	0282      	lsls	r2, r0, #10
  {
    /* Clear the input capture select bits */
    tmpreg &= (uint32_t)(~(IC_ROUTING_MASK << 12));
 80018a4:	bf48      	it	mi
 80018a6:	f423 4370 	bicmi.w	r3, r3, #61440	@ 0xf000
    /* Set RI_InputCaptureRouting bits  */
    tmpreg |= (uint32_t)( (RI_InputCaptureRouting << 12));
  }

  /* Write to RI->ICR register */
  RI->ICR = tmpreg;
 80018aa:	4a03      	ldr	r2, [pc, #12]	@ (80018b8 <SYSCFG_RITIMInputCaptureConfig+0x40>)
    tmpreg |= (uint32_t)( (RI_InputCaptureRouting << 12));
 80018ac:	bf48      	it	mi
 80018ae:	ea43 3301 	orrmi.w	r3, r3, r1, lsl #12
  RI->ICR = tmpreg;
 80018b2:	6053      	str	r3, [r2, #4]
}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40007c00 	.word	0x40007c00

080018bc <SYSCFG_RIResistorConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the resistor */
    COMP->CSR |= (uint32_t) RI_Resistor;
 80018bc:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <SYSCFG_RIResistorConfig+0x1c>)
 80018be:	f8d2 3c00 	ldr.w	r3, [r2, #3072]	@ 0xc00
  if (NewState != DISABLE)
 80018c2:	b119      	cbz	r1, 80018cc <SYSCFG_RIResistorConfig+0x10>
    COMP->CSR |= (uint32_t) RI_Resistor;
 80018c4:	4303      	orrs	r3, r0
 80018c6:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80018ca:	4770      	bx	lr
  }
  else
  {
    /* Disable the Resistor */
    COMP->CSR &= (uint32_t) (~RI_Resistor);
 80018cc:	ea23 0300 	bic.w	r3, r3, r0
 80018d0:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
  }
}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40007000 	.word	0x40007000

080018dc <SYSCFG_RIChannelSpeedConfig>:
  assert_param(IS_RI_CHANNELSPEED(RI_ChannelSpeed));

  if(RI_ChannelSpeed != RI_ChannelSpeed_Fast)
  {
    /* Set the selected channel as a slow ADC channel */
    COMP->CSR &= (uint32_t) (~RI_Channel);
 80018dc:	4a06      	ldr	r2, [pc, #24]	@ (80018f8 <SYSCFG_RIChannelSpeedConfig+0x1c>)
 80018de:	f8d2 3c00 	ldr.w	r3, [r2, #3072]	@ 0xc00
  if(RI_ChannelSpeed != RI_ChannelSpeed_Fast)
 80018e2:	b121      	cbz	r1, 80018ee <SYSCFG_RIChannelSpeedConfig+0x12>
    COMP->CSR &= (uint32_t) (~RI_Channel);
 80018e4:	ea23 0300 	bic.w	r3, r3, r0
 80018e8:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80018ec:	4770      	bx	lr
  }
  else
  {
    /* Set the selected channel as a fast ADC channel */
    COMP->CSR |= (uint32_t) (RI_Channel);
 80018ee:	4303      	orrs	r3, r0
 80018f0:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
  }
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000

080018fc <SYSCFG_RIIOSwitchConfig>:
  
  /* Check the parameters */
  assert_param(IS_RI_IOSWITCH(RI_IOSwitch));
  
  /* Read Analog switch register index */
  ioswitchmask = RI_IOSwitch >> 31;
 80018fc:	0fc3      	lsrs	r3, r0, #31
  
  /* Get Bits[30:0] of the IO switch */
  RI_IOSwitch  &= 0x7FFFFFFF;
 80018fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
  
  
  if (NewState != DISABLE)
 8001902:	b129      	cbz	r1, 8001910 <SYSCFG_RIIOSwitchConfig+0x14>
  {
    if (ioswitchmask != 0)
    {
      /* Close the analog switches */
      RI->ASCR1 |= RI_IOSwitch;
 8001904:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <SYSCFG_RIIOSwitchConfig+0x34>)
    if (ioswitchmask != 0)
 8001906:	b173      	cbz	r3, 8001926 <SYSCFG_RIIOSwitchConfig+0x2a>
      RI->ASCR1 |= RI_IOSwitch;
 8001908:	6893      	ldr	r3, [r2, #8]
 800190a:	4303      	orrs	r3, r0
 800190c:	6093      	str	r3, [r2, #8]
 800190e:	4770      	bx	lr
  else
  {
    if (ioswitchmask != 0)
    {
      /* Close the analog switches */
      RI->ASCR1 &= (~ (uint32_t)RI_IOSwitch);
 8001910:	43c0      	mvns	r0, r0
 8001912:	4a07      	ldr	r2, [pc, #28]	@ (8001930 <SYSCFG_RIIOSwitchConfig+0x34>)
    if (ioswitchmask != 0)
 8001914:	b11b      	cbz	r3, 800191e <SYSCFG_RIIOSwitchConfig+0x22>
      RI->ASCR1 &= (~ (uint32_t)RI_IOSwitch);
 8001916:	6893      	ldr	r3, [r2, #8]
 8001918:	4003      	ands	r3, r0
 800191a:	6093      	str	r3, [r2, #8]
 800191c:	4770      	bx	lr
    }
    else
    {
      /* Open the analog switches */
      RI->ASCR2 &= (~ (uint32_t)RI_IOSwitch);
 800191e:	68d3      	ldr	r3, [r2, #12]
 8001920:	4003      	ands	r3, r0
 8001922:	60d3      	str	r3, [r2, #12]
    }
  }
}
 8001924:	4770      	bx	lr
      RI->ASCR2 |= RI_IOSwitch;
 8001926:	68d3      	ldr	r3, [r2, #12]
 8001928:	4303      	orrs	r3, r0
 800192a:	60d3      	str	r3, [r2, #12]
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40007c00 	.word	0x40007c00

08001934 <SYSCFG_RISwitchControlModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Switch control mode */
    RI->ASCR1 |= (uint32_t) RI_ASCR1_SCM;
 8001934:	4a05      	ldr	r2, [pc, #20]	@ (800194c <SYSCFG_RISwitchControlModeCmd+0x18>)
 8001936:	6893      	ldr	r3, [r2, #8]
  if (NewState != DISABLE)
 8001938:	b118      	cbz	r0, 8001942 <SYSCFG_RISwitchControlModeCmd+0xe>
    RI->ASCR1 |= (uint32_t) RI_ASCR1_SCM;
 800193a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800193e:	6093      	str	r3, [r2, #8]
 8001940:	4770      	bx	lr
  }
  else
  {
    /* Disable the Switch control mode */
    RI->ASCR1 &= (uint32_t)(~RI_ASCR1_SCM);
 8001942:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001946:	6093      	str	r3, [r2, #8]
  }
}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40007c00 	.word	0x40007c00

08001950 <SYSCFG_RIHysteresisConfig>:
  /* Check the parameters */
  assert_param(IS_RI_PORT(RI_Port));
  assert_param(IS_RI_PIN(RI_Pin));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(RI_Port == RI_PortA)
 8001950:	3801      	subs	r0, #1
 8001952:	2805      	cmp	r0, #5
 8001954:	d856      	bhi.n	8001a04 <SYSCFG_RIHysteresisConfig+0xb4>
 8001956:	e8df f000 	tbb	[pc, r0]
 800195a:	140c      	.short	0x140c
 800195c:	032d1d25 	.word	0x032d1d25
      RI->HYSCR3 |= (uint32_t) (RI_Pin );
    }
  }
  else if(RI_Port == RI_PortF)
  {
    if (NewState != DISABLE)
 8001960:	2a00      	cmp	r2, #0
 8001962:	d02e      	beq.n	80019c2 <SYSCFG_RIHysteresisConfig+0x72>
    {
      /* Hysteresis on */
      RI->HYSCR3 &= (uint32_t) (~((uint32_t)RI_Pin) << 16);
 8001964:	43c9      	mvns	r1, r1
 8001966:	4a2d      	ldr	r2, [pc, #180]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 8001968:	6993      	ldr	r3, [r2, #24]
 800196a:	ea03 4301 	and.w	r3, r3, r1, lsl #16
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4770      	bx	lr
    if (NewState != DISABLE)
 8001972:	2a00      	cmp	r2, #0
 8001974:	d030      	beq.n	80019d8 <SYSCFG_RIHysteresisConfig+0x88>
      RI->HYSCR1 &= (uint32_t)~((uint32_t)RI_Pin);
 8001976:	4a29      	ldr	r2, [pc, #164]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 8001978:	6913      	ldr	r3, [r2, #16]
 800197a:	ea23 0301 	bic.w	r3, r3, r1
 800197e:	6113      	str	r3, [r2, #16]
 8001980:	4770      	bx	lr
    if (NewState != DISABLE)
 8001982:	2a00      	cmp	r2, #0
 8001984:	d033      	beq.n	80019ee <SYSCFG_RIHysteresisConfig+0x9e>
      RI->HYSCR1 &= (uint32_t) (~((uint32_t)RI_Pin) << 16);
 8001986:	43c9      	mvns	r1, r1
 8001988:	4a24      	ldr	r2, [pc, #144]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 800198a:	6913      	ldr	r3, [r2, #16]
 800198c:	ea03 4301 	and.w	r3, r3, r1, lsl #16
 8001990:	6113      	str	r3, [r2, #16]
 8001992:	4770      	bx	lr
    if (NewState != DISABLE)
 8001994:	b32a      	cbz	r2, 80019e2 <SYSCFG_RIHysteresisConfig+0x92>
      RI->HYSCR2 &= (uint32_t) (~((uint32_t)RI_Pin) << 16);
 8001996:	43c9      	mvns	r1, r1
 8001998:	4a20      	ldr	r2, [pc, #128]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 800199a:	6953      	ldr	r3, [r2, #20]
 800199c:	ea03 4301 	and.w	r3, r3, r1, lsl #16
 80019a0:	6153      	str	r3, [r2, #20]
 80019a2:	4770      	bx	lr
    if (NewState != DISABLE)
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	d028      	beq.n	80019fa <SYSCFG_RIHysteresisConfig+0xaa>
      RI->HYSCR2 &= (uint32_t) (~((uint32_t)RI_Pin));
 80019a8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 80019aa:	6953      	ldr	r3, [r2, #20]
 80019ac:	ea23 0301 	bic.w	r3, r3, r1
 80019b0:	6153      	str	r3, [r2, #20]
 80019b2:	4770      	bx	lr
    if (NewState != DISABLE)
 80019b4:	b15a      	cbz	r2, 80019ce <SYSCFG_RIHysteresisConfig+0x7e>
      RI->HYSCR3 &= (uint32_t) (~((uint32_t)RI_Pin));
 80019b6:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 80019b8:	6993      	ldr	r3, [r2, #24]
 80019ba:	ea23 0301 	bic.w	r3, r3, r1
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4770      	bx	lr
    }
    else
    {
      /* Hysteresis off */
      RI->HYSCR3 |= (uint32_t) ((uint32_t)(RI_Pin) << 16);
 80019c2:	4a16      	ldr	r2, [pc, #88]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 80019c4:	6993      	ldr	r3, [r2, #24]
 80019c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4770      	bx	lr
      RI->HYSCR3 |= (uint32_t) (RI_Pin );
 80019ce:	4a13      	ldr	r2, [pc, #76]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 80019d0:	6993      	ldr	r3, [r2, #24]
 80019d2:	430b      	orrs	r3, r1
 80019d4:	6193      	str	r3, [r2, #24]
 80019d6:	4770      	bx	lr
      RI->HYSCR1 |= (uint32_t) RI_Pin;
 80019d8:	4a10      	ldr	r2, [pc, #64]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 80019da:	6913      	ldr	r3, [r2, #16]
 80019dc:	430b      	orrs	r3, r1
 80019de:	6113      	str	r3, [r2, #16]
 80019e0:	4770      	bx	lr
      RI->HYSCR2 |= (uint32_t) ((uint32_t)(RI_Pin) << 16);
 80019e2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 80019e4:	6953      	ldr	r3, [r2, #20]
 80019e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80019ea:	6153      	str	r3, [r2, #20]
 80019ec:	4770      	bx	lr
      RI->HYSCR1 |= (uint32_t) ((uint32_t)(RI_Pin) << 16);
 80019ee:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 80019f0:	6913      	ldr	r3, [r2, #16]
 80019f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80019f6:	6113      	str	r3, [r2, #16]
 80019f8:	4770      	bx	lr
      RI->HYSCR2 |= (uint32_t) (RI_Pin );
 80019fa:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 80019fc:	6953      	ldr	r3, [r2, #20]
 80019fe:	430b      	orrs	r3, r1
 8001a00:	6153      	str	r3, [r2, #20]
 8001a02:	4770      	bx	lr
    }
  }
  else /* RI_Port == RI_PortG */
  {
    if (NewState != DISABLE)
 8001a04:	b12a      	cbz	r2, 8001a12 <SYSCFG_RIHysteresisConfig+0xc2>
    {
      /* Hysteresis on */
      RI->HYSCR4 &= (uint32_t) (~((uint32_t)RI_Pin));
 8001a06:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 8001a08:	69d3      	ldr	r3, [r2, #28]
 8001a0a:	ea23 0301 	bic.w	r3, r3, r1
 8001a0e:	61d3      	str	r3, [r2, #28]
 8001a10:	4770      	bx	lr
    }
    else
    {
      /* Hysteresis off */
      RI->HYSCR4 |= (uint32_t) (RI_Pin);
 8001a12:	4a02      	ldr	r2, [pc, #8]	@ (8001a1c <SYSCFG_RIHysteresisConfig+0xcc>)
 8001a14:	69d3      	ldr	r3, [r2, #28]
 8001a16:	430b      	orrs	r3, r1
 8001a18:	61d3      	str	r3, [r2, #28]
    }
  }
}
 8001a1a:	4770      	bx	lr
 8001a1c:	40007c00 	.word	0x40007c00

08001a20 <USART_DeInit>:
  *   This parameter can be one of the following values: USART1, USART2, USART3, 
  *   UART4 or UART5.
  * @retval None.
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001a20:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001a22:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <USART_DeInit+0x9c>)
 8001a24:	4298      	cmp	r0, r3
 8001a26:	d018      	beq.n	8001a5a <USART_DeInit+0x3a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8001a28:	4b25      	ldr	r3, [pc, #148]	@ (8001ac0 <USART_DeInit+0xa0>)
 8001a2a:	4298      	cmp	r0, r3
 8001a2c:	d021      	beq.n	8001a72 <USART_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8001a2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <USART_DeInit+0xa4>)
 8001a30:	4298      	cmp	r0, r3
 8001a32:	d02a      	beq.n	8001a8a <USART_DeInit+0x6a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8001a34:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <USART_DeInit+0xa8>)
 8001a36:	4298      	cmp	r0, r3
 8001a38:	d003      	beq.n	8001a42 <USART_DeInit+0x22>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }    
  else
  {
    if (USARTx == UART5)
 8001a3a:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <USART_DeInit+0xac>)
 8001a3c:	4298      	cmp	r0, r3
 8001a3e:	d030      	beq.n	8001aa2 <USART_DeInit+0x82>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }   
}
 8001a40:	bd08      	pop	{r3, pc}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8001a42:	2101      	movs	r1, #1
 8001a44:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a48:	f7ff fcde 	bl	8001408 <RCC_APB1PeriphResetCmd>
}
 8001a4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8001a50:	2100      	movs	r1, #0
 8001a52:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a56:	f7ff bcd7 	b.w	8001408 <RCC_APB1PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a60:	f7ff fcc6 	bl	80013f0 <RCC_APB2PeriphResetCmd>
}
 8001a64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a6e:	f7ff bcbf 	b.w	80013f0 <RCC_APB2PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8001a72:	2101      	movs	r1, #1
 8001a74:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001a78:	f7ff fcc6 	bl	8001408 <RCC_APB1PeriphResetCmd>
}
 8001a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001a80:	2100      	movs	r1, #0
 8001a82:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001a86:	f7ff bcbf 	b.w	8001408 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001a90:	f7ff fcba 	bl	8001408 <RCC_APB1PeriphResetCmd>
}
 8001a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001a9e:	f7ff bcb3 	b.w	8001408 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001aa8:	f7ff fcae 	bl	8001408 <RCC_APB1PeriphResetCmd>
}
 8001aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001ab6:	f7ff bca7 	b.w	8001408 <RCC_APB1PeriphResetCmd>
 8001aba:	bf00      	nop
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	40004400 	.word	0x40004400
 8001ac4:	40004800 	.word	0x40004800
 8001ac8:	40004c00 	.word	0x40004c00
 8001acc:	40005000 	.word	0x40005000

08001ad0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001ad0:	b530      	push	{r4, r5, lr}
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	460d      	mov	r5, r1
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001ad6:	8a23      	ldrh	r3, [r4, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001ad8:	88ca      	ldrh	r2, [r1, #6]
  tmpreg = USARTx->CR2;
 8001ada:	b29b      	uxth	r3, r3
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001adc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	8223      	strh	r3, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001ae4:	89a2      	ldrh	r2, [r4, #12]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001ae6:	888b      	ldrh	r3, [r1, #4]
 8001ae8:	8909      	ldrh	r1, [r1, #8]
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001aea:	f422 52b0 	bic.w	r2, r2, #5632	@ 0x1600
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001aee:	430b      	orrs	r3, r1
 8001af0:	8969      	ldrh	r1, [r5, #10]
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001af2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001af6:	430b      	orrs	r3, r1
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001af8:	0412      	lsls	r2, r2, #16
 8001afa:	0c12      	lsrs	r2, r2, #16
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001afc:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001afe:	4313      	orrs	r3, r2
 8001b00:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001b02:	8aa3      	ldrh	r3, [r4, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001b04:	89aa      	ldrh	r2, [r5, #12]
  tmpreg = USARTx->CR3;
 8001b06:	b29b      	uxth	r3, r3
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001b0c:	4313      	orrs	r3, r2
{
 8001b0e:	b085      	sub	sp, #20

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001b10:	4668      	mov	r0, sp
  USARTx->CR3 = (uint16_t)tmpreg;
 8001b12:	82a3      	strh	r3, [r4, #20]
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001b14:	f7ff fbc2 	bl	800129c <RCC_GetClocksFreq>
  if (USARTx == USART1) 
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001b18:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
  if (USARTx == USART1) 
 8001b1c:	4818      	ldr	r0, [pc, #96]	@ (8001b80 <USART_Init+0xb0>)

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001b1e:	682a      	ldr	r2, [r5, #0]
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001b20:	4284      	cmp	r4, r0
 8001b22:	bf08      	it	eq
 8001b24:	460b      	moveq	r3, r1
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001b26:	89a1      	ldrh	r1, [r4, #12]
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001b28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001b2c:	0408      	lsls	r0, r1, #16
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001b2e:	bf4c      	ite	mi
 8001b30:	0052      	lslmi	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001b32:	0092      	lslpl	r2, r2, #2
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001b34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001b38:	fbb3 f3f2 	udiv	r3, r3, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8001b3c:	2564      	movs	r5, #100	@ 0x64
 8001b3e:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <USART_Init+0xb4>)
 8001b40:	fba0 2103 	umull	r2, r1, r0, r3
 8001b44:	0949      	lsrs	r1, r1, #5
 8001b46:	fb05 3311 	mls	r3, r5, r1, r3
 8001b4a:	010a      	lsls	r2, r1, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001b4c:	89a1      	ldrh	r1, [r4, #12]
 8001b4e:	0409      	lsls	r1, r1, #16
 8001b50:	d40a      	bmi.n	8001b68 <USART_Init+0x98>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	3332      	adds	r3, #50	@ 0x32
 8001b56:	fba0 0303 	umull	r0, r3, r0, r3
 8001b5a:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001b5e:	4313      	orrs	r3, r2
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	8123      	strh	r3, [r4, #8]
}
 8001b64:	b005      	add	sp, #20
 8001b66:	bd30      	pop	{r4, r5, pc}
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	3332      	adds	r3, #50	@ 0x32
 8001b6c:	fba0 0303 	umull	r0, r3, r0, r3
 8001b70:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001b74:	4313      	orrs	r3, r2
  USARTx->BRR = (uint16_t)tmpreg;
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	8123      	strh	r3, [r4, #8]
}
 8001b7a:	b005      	add	sp, #20
 8001b7c:	bd30      	pop	{r4, r5, pc}
 8001b7e:	bf00      	nop
 8001b80:	40013800 	.word	0x40013800
 8001b84:	51eb851f 	.word	0x51eb851f

08001b88 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001b88:	2300      	movs	r3, #0
  USART_InitStruct->USART_BaudRate = 9600;
 8001b8a:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001b8e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001b92:	e9c0 1300 	strd	r1, r3, [r0]
 8001b96:	6082      	str	r2, [r0, #8]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001b98:	8183      	strh	r3, [r0, #12]
}
 8001b9a:	4770      	bx	lr

08001b9c <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001b9c:	880b      	ldrh	r3, [r1, #0]
{
 8001b9e:	b500      	push	{lr}
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001ba0:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 8001ba4:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  tmpreg = USARTx->CR2;
 8001ba8:	8a02      	ldrh	r2, [r0, #16]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001baa:	88c9      	ldrh	r1, [r1, #6]
 8001bac:	ea43 030e 	orr.w	r3, r3, lr
 8001bb0:	ea43 030c 	orr.w	r3, r3, ip
  tmpreg = USARTx->CR2;
 8001bb4:	b292      	uxth	r2, r2
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001bb6:	430b      	orrs	r3, r1
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001bb8:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001bbc:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	8203      	strh	r3, [r0, #16]
}
 8001bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bc6:	bf00      	nop

08001bc8 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	6003      	str	r3, [r0, #0]
 8001bcc:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
}
 8001bce:	4770      	bx	lr

08001bd0 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001bd0:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8001bd2:	b121      	cbz	r1, 8001bde <USART_Cmd+0xe>
    USARTx->CR1 |= USART_CR1_UE;
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bda:	8183      	strh	r3, [r0, #12]
 8001bdc:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001bde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001be2:	041b      	lsls	r3, r3, #16
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	8183      	strh	r3, [r0, #12]
  }
}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop

08001bec <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001bec:	8b03      	ldrh	r3, [r0, #24]
 8001bee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001bf2:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001bf4:	8b03      	ldrh	r3, [r0, #24]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	8301      	strh	r1, [r0, #24]
}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop

08001c00 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001c00:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8001c02:	b131      	cbz	r1, 8001c12 <USART_OverSampling8Cmd+0x12>
    USARTx->CR1 |= USART_CR1_OVER8;
 8001c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	8183      	strh	r3, [r0, #12]
 8001c10:	4770      	bx	lr
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8001c12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c16:	8183      	strh	r3, [r0, #12]
  }
}  
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001c1c:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 8001c1e:	b121      	cbz	r1, 8001c2a <USART_OneBitMethodCmd+0xe>
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c26:	8283      	strh	r3, [r0, #20]
 8001c28:	4770      	bx	lr
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8001c2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	8283      	strh	r3, [r0, #20]
  }
}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop

08001c38 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001c38:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001c3c:	8081      	strh	r1, [r0, #4]
}
 8001c3e:	4770      	bx	lr

08001c40 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001c40:	8880      	ldrh	r0, [r0, #4]
}
 8001c42:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001c46:	4770      	bx	lr

08001c48 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8001c48:	8a03      	ldrh	r3, [r0, #16]
 8001c4a:	f023 030f 	bic.w	r3, r3, #15
 8001c4e:	041b      	lsls	r3, r3, #16
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8001c54:	8a03      	ldrh	r3, [r0, #16]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4319      	orrs	r1, r3
 8001c5a:	8201      	strh	r1, [r0, #16]
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop

08001c60 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001c60:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8001c62:	b121      	cbz	r1, 8001c6e <USART_ReceiverWakeUpCmd+0xe>
    USARTx->CR1 |= USART_CR1_RWU;
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	8183      	strh	r3, [r0, #12]
 8001c6c:	4770      	bx	lr
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8001c6e:	f023 0302 	bic.w	r3, r3, #2
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	8183      	strh	r3, [r0, #12]
  }
}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001c7c:	8983      	ldrh	r3, [r0, #12]
 8001c7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c82:	041b      	lsls	r3, r3, #16
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001c88:	8983      	ldrh	r3, [r0, #12]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	8183      	strh	r3, [r0, #12]
}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop

08001c94 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8001c94:	8a03      	ldrh	r3, [r0, #16]
 8001c96:	f023 0320 	bic.w	r3, r3, #32
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001ca0:	8a03      	ldrh	r3, [r0, #16]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	8203      	strh	r3, [r0, #16]
}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001cac:	8a03      	ldrh	r3, [r0, #16]
  if (NewState != DISABLE)
 8001cae:	b121      	cbz	r1, 8001cba <USART_LINCmd+0xe>
    USARTx->CR2 |= USART_CR2_LINEN;
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb6:	8203      	strh	r3, [r0, #16]
 8001cb8:	4770      	bx	lr
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8001cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	8203      	strh	r3, [r0, #16]
  }
}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop

08001cc8 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001cc8:	8983      	ldrh	r3, [r0, #12]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	8183      	strh	r3, [r0, #12]
}
 8001cd2:	4770      	bx	lr

08001cd4 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001cd4:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 8001cd6:	b121      	cbz	r1, 8001ce2 <USART_HalfDuplexCmd+0xe>
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	8283      	strh	r3, [r0, #20]
 8001ce0:	4770      	bx	lr
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001ce2:	f023 0308 	bic.w	r3, r3, #8
 8001ce6:	041b      	lsls	r3, r3, #16
 8001ce8:	0c1b      	lsrs	r3, r3, #16
 8001cea:	8283      	strh	r3, [r0, #20]
  }
}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001cf0:	8b03      	ldrh	r3, [r0, #24]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001cf6:	8b03      	ldrh	r3, [r0, #24]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001cfe:	8303      	strh	r3, [r0, #24]
}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001d04:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 8001d06:	b121      	cbz	r1, 8001d12 <USART_SmartCardCmd+0xe>
    USARTx->CR3 |= USART_CR3_SCEN;
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f043 0320 	orr.w	r3, r3, #32
 8001d0e:	8283      	strh	r3, [r0, #20]
 8001d10:	4770      	bx	lr
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8001d12:	f023 0320 	bic.w	r3, r3, #32
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	8283      	strh	r3, [r0, #20]
  }
}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001d20:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 8001d22:	b121      	cbz	r1, 8001d2e <USART_SmartCardNACKCmd+0xe>
    USARTx->CR3 |= USART_CR3_NACK;
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	8283      	strh	r3, [r0, #20]
 8001d2c:	4770      	bx	lr
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8001d2e:	f023 0310 	bic.w	r3, r3, #16
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	8283      	strh	r3, [r0, #20]
  }
}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop

08001d3c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8001d3c:	8a83      	ldrh	r3, [r0, #20]
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	041b      	lsls	r3, r3, #16
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8001d48:	8a83      	ldrh	r3, [r0, #20]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	8283      	strh	r3, [r0, #20]
}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop

08001d54 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001d54:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 8001d56:	b121      	cbz	r1, 8001d62 <USART_IrDACmd+0xe>
    USARTx->CR3 |= USART_CR3_IREN;
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f043 0302 	orr.w	r3, r3, #2
 8001d5e:	8283      	strh	r3, [r0, #20]
 8001d60:	4770      	bx	lr
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8001d62:	f023 0302 	bic.w	r3, r3, #2
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	8283      	strh	r3, [r0, #20]
  }
}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop

08001d70 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001d70:	8a83      	ldrh	r3, [r0, #20]
 8001d72:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8001d74:	b112      	cbz	r2, 8001d7c <USART_DMACmd+0xc>
    USARTx->CR3 |= USART_DMAReq;
 8001d76:	430b      	orrs	r3, r1
 8001d78:	8283      	strh	r3, [r0, #20]
 8001d7a:	4770      	bx	lr
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001d7c:	ea23 0301 	bic.w	r3, r3, r1
 8001d80:	8283      	strh	r3, [r0, #20]
  }
}
 8001d82:	4770      	bx	lr

08001d84 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001d84:	2301      	movs	r3, #1
  itpos = USART_IT & IT_MASK;
 8001d86:	f001 0c1f 	and.w	ip, r1, #31
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001d8a:	f3c1 1142 	ubfx	r1, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001d8e:	2901      	cmp	r1, #1
  itmask = (((uint32_t)0x01) << itpos);
 8001d90:	fa03 f30c 	lsl.w	r3, r3, ip
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001d94:	d00d      	beq.n	8001db2 <USART_ITConfig+0x2e>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001d96:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 8001d98:	bf0c      	ite	eq
 8001d9a:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001d9c:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 8001d9e:	b11a      	cbz	r2, 8001da8 <USART_ITConfig+0x24>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001da0:	6802      	ldr	r2, [r0, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	6003      	str	r3, [r0, #0]
 8001da6:	4770      	bx	lr
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001da8:	6802      	ldr	r2, [r0, #0]
 8001daa:	ea22 0303 	bic.w	r3, r2, r3
 8001dae:	6003      	str	r3, [r0, #0]
  }
}
 8001db0:	4770      	bx	lr
    usartxbase += 0x0C;
 8001db2:	300c      	adds	r0, #12
 8001db4:	e7f3      	b.n	8001d9e <USART_ITConfig+0x1a>
 8001db6:	bf00      	nop

08001db8 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001db8:	8803      	ldrh	r3, [r0, #0]
 8001dba:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001dbc:	bf14      	ite	ne
 8001dbe:	2001      	movne	r0, #1
 8001dc0:	2000      	moveq	r0, #0
 8001dc2:	4770      	bx	lr

08001dc4 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001dc4:	43c9      	mvns	r1, r1
 8001dc6:	b289      	uxth	r1, r1
 8001dc8:	8001      	strh	r1, [r0, #0]
}
 8001dca:	4770      	bx	lr

08001dcc <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001dcc:	2301      	movs	r3, #1
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001dce:	f3c1 1242 	ubfx	r2, r1, #5, #3
  itmask = USART_IT & IT_MASK;
 8001dd2:	f001 0c1f 	and.w	ip, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001dd6:	2a01      	cmp	r2, #1
  itmask = (uint32_t)0x01 << itmask;
 8001dd8:	fa03 f30c 	lsl.w	r3, r3, ip
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001ddc:	d012      	beq.n	8001e04 <USART_GetITStatus+0x38>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001dde:	2a02      	cmp	r2, #2
  {
    itmask &= USARTx->CR2;
 8001de0:	bf0c      	ite	eq
 8001de2:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001de4:	8a82      	ldrhne	r2, [r0, #20]
 8001de6:	b292      	uxth	r2, r2
 8001de8:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001dea:	8802      	ldrh	r2, [r0, #0]
 8001dec:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001dee:	b13b      	cbz	r3, 8001e00 <USART_GetITStatus+0x34>
  bitpos = (uint32_t)0x01 << bitpos;
 8001df0:	2301      	movs	r3, #1
  bitpos = USART_IT >> 0x08;
 8001df2:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8001df4:	408b      	lsls	r3, r1
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001df6:	421a      	tst	r2, r3
 8001df8:	bf14      	ite	ne
 8001dfa:	2001      	movne	r0, #1
 8001dfc:	2000      	moveq	r0, #0
 8001dfe:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8001e00:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8001e02:	4770      	bx	lr
    itmask &= USARTx->CR1;
 8001e04:	8982      	ldrh	r2, [r0, #12]
 8001e06:	b292      	uxth	r2, r2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	e7ee      	b.n	8001dea <USART_GetITStatus+0x1e>

08001e0c <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	0a09      	lsrs	r1, r1, #8
 8001e10:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8001e12:	43db      	mvns	r3, r3
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	8003      	strh	r3, [r0, #0]
}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop

08001e1c <__libc_init_array>:
#endif

/* Iterate over all the init routines.  */
void
__libc_init_array (void)
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 8001e1e:	2600      	movs	r6, #0
  count = __preinit_array_end - __preinit_array_start;
 8001e20:	4d0c      	ldr	r5, [pc, #48]	@ (8001e54 <__libc_init_array+0x38>)
 8001e22:	4c0d      	ldr	r4, [pc, #52]	@ (8001e58 <__libc_init_array+0x3c>)
 8001e24:	1b64      	subs	r4, r4, r5
 8001e26:	10a4      	asrs	r4, r4, #2
  for (i = 0; i < count; i++)
 8001e28:	42a6      	cmp	r6, r4
 8001e2a:	d109      	bne.n	8001e40 <__libc_init_array+0x24>
    __preinit_array_start[i] ();

#ifdef _HAVE_INIT_FINI
  _init ();
 8001e2c:	f000 f93e 	bl	80020ac <_init>
#endif

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 8001e30:	2600      	movs	r6, #0
  count = __init_array_end - __init_array_start;
 8001e32:	4d0a      	ldr	r5, [pc, #40]	@ (8001e5c <__libc_init_array+0x40>)
 8001e34:	4c0a      	ldr	r4, [pc, #40]	@ (8001e60 <__libc_init_array+0x44>)
 8001e36:	1b64      	subs	r4, r4, r5
 8001e38:	10a4      	asrs	r4, r4, #2
  for (i = 0; i < count; i++)
 8001e3a:	42a6      	cmp	r6, r4
 8001e3c:	d105      	bne.n	8001e4a <__libc_init_array+0x2e>
    __init_array_start[i] ();
}
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
    __preinit_array_start[i] ();
 8001e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e44:	4798      	blx	r3
  for (i = 0; i < count; i++)
 8001e46:	3601      	adds	r6, #1
 8001e48:	e7ee      	b.n	8001e28 <__libc_init_array+0xc>
    __init_array_start[i] ();
 8001e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e4e:	4798      	blx	r3
  for (i = 0; i < count; i++)
 8001e50:	3601      	adds	r6, #1
 8001e52:	e7f2      	b.n	8001e3a <__libc_init_array+0x1e>
	...

08001e64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e64:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e66:	e003      	b.n	8001e70 <LoopCopyDataInit>

08001e68 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e6a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e6c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e6e:	3104      	adds	r1, #4

08001e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e70:	480a      	ldr	r0, [pc, #40]	@ (8001e9c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e74:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e76:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e78:	d3f6      	bcc.n	8001e68 <CopyDataInit>
  ldr r2, =_sbss
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e7c:	e002      	b.n	8001e84 <LoopFillZerobss>

08001e7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e80:	f842 3b04 	str.w	r3, [r2], #4

08001e84 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e86:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e88:	d3f9      	bcc.n	8001e7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e8a:	f000 f811 	bl	8001eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f7ff ffc5 	bl	8001e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e92:	f000 f89f 	bl	8001fd4 <main>
  bx lr
 8001e96:	4770      	bx	lr
  ldr r3, =_sidata
 8001e98:	080020c4 	.word	0x080020c4
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ea0:	20000040 	.word	0x20000040
  ldr r2, =_sbss
 8001ea4:	20000040 	.word	0x20000040
  ldr r3, = _ebss
 8001ea8:	20000070 	.word	0x20000070

08001eac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eac:	e7fe      	b.n	8001eac <ADC1_IRQHandler>
	...

08001eb0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fac <SystemInit+0xfc>)
{
 8001eb2:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000100;
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eba:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001ebc:	6899      	ldr	r1, [r3, #8]
 8001ebe:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb0 <SystemInit+0x100>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	f022 5288 	bic.w	r2, r2, #285212672	@ 0x11000000
 8001eca:	f022 1201 	bic.w	r2, r2, #65537	@ 0x10001
 8001ece:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ed6:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	f422 027d 	bic.w	r2, r2, #16580608	@ 0xfd0000
 8001ede:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001ee4:	9200      	str	r2, [sp, #0]
 8001ee6:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001eee:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001ef6:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8001ef8:	9a00      	ldr	r2, [sp, #0]
 8001efa:	3201      	adds	r2, #1
 8001efc:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001efe:	9a01      	ldr	r2, [sp, #4]
 8001f00:	b91a      	cbnz	r2, 8001f0a <SystemInit+0x5a>
 8001f02:	9a00      	ldr	r2, [sp, #0]
 8001f04:	f5b2 4fa0 	cmp.w	r2, #20480	@ 0x5000
 8001f08:	d1f2      	bne.n	8001ef0 <SystemInit+0x40>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8001f10:	bf18      	it	ne
 8001f12:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001f14:	9301      	str	r3, [sp, #4]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001f16:	9b01      	ldr	r3, [sp, #4]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d141      	bne.n	8001fa0 <SystemInit+0xf0>
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001f1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001f20:	4b24      	ldr	r3, [pc, #144]	@ (8001fb4 <SystemInit+0x104>)
 8001f22:	681a      	ldr	r2, [r3, #0]
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001f24:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001f28:	f042 0204 	orr.w	r2, r2, #4
 8001f2c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001f30:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8001f34:	f042 0202 	orr.w	r2, r2, #2
 8001f38:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001f3c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8001f40:	f042 0201 	orr.w	r2, r2, #1
 8001f44:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f4a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    PWR->CR = PWR_CR_VOS_0;
 8001f50:	4a19      	ldr	r2, [pc, #100]	@ (8001fb8 <SystemInit+0x108>)
 8001f52:	6011      	str	r1, [r2, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001f54:	6851      	ldr	r1, [r2, #4]
 8001f56:	06c9      	lsls	r1, r1, #27
 8001f58:	d4fc      	bmi.n	8001f54 <SystemInit+0xa4>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	609a      	str	r2, [r3, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	609a      	str	r2, [r3, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	f422 027d 	bic.w	r2, r2, #16580608	@ 0xfd0000
 8001f6c:	609a      	str	r2, [r3, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	f442 0211 	orr.w	r2, r2, #9502720	@ 0x910000
 8001f74:	609a      	str	r2, [r3, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <SystemInit+0xfc>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	0192      	lsls	r2, r2, #6
 8001f84:	d5fc      	bpl.n	8001f80 <SystemInit+0xd0>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	f022 0203 	bic.w	r2, r2, #3
 8001f8c:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	f042 0203 	orr.w	r2, r2, #3
 8001f94:	609a      	str	r2, [r3, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	f002 020c 	and.w	r2, r2, #12
 8001f9c:	2a0c      	cmp	r2, #12
 8001f9e:	d1fa      	bne.n	8001f96 <SystemInit+0xe6>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fa0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <SystemInit+0x10c>)
 8001fa6:	609a      	str	r2, [r3, #8]
}
 8001fa8:	b002      	add	sp, #8
 8001faa:	4770      	bx	lr
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	88ffc00c 	.word	0x88ffc00c
 8001fb4:	40023c00 	.word	0x40023c00
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001fc0:	4770      	bx	lr

08001fc2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler>

08001fc4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler>

08001fc6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <BusFault_Handler>

08001fc8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler>

08001fca <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8001fca:	4770      	bx	lr

08001fcc <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:
/**
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  TimingDelay_Decrement();
 8001fd0:	f000 b80c 	b.w	8001fec <TimingDelay_Decrement>

08001fd4 <main>:
     */     
       
  /* Initialize Leds mounted on STM32L152-EVAL board */
  //STM_EVAL_LEDInit(LED1);
  //STM_EVAL_LEDInit(LED2);
  STM_EVAL_LEDInit(LED3);
 8001fd4:	2002      	movs	r0, #2
{
 8001fd6:	b508      	push	{r3, lr}
  STM_EVAL_LEDInit(LED3);
 8001fd8:	f7fe f8b0 	bl	800013c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f7fe f8ad 	bl	800013c <STM_EVAL_LEDInit>

  /* Turn on LED1 and LED3 */
  //STM_EVAL_LEDOn(LED1);
  STM_EVAL_LEDOn(LED3);
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	f7fe f8ca 	bl	800017c <STM_EVAL_LEDOn>
  while(1);
 8001fe8:	e7fe      	b.n	8001fe8 <main+0x14>
	...

08001fec <TimingDelay_Decrement>:
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <TimingDelay_Decrement+0x10>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	b112      	cbz	r2, 8001ff8 <TimingDelay_Decrement+0xc>
  { 
    TimingDelay--;
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	3a01      	subs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
  }
}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000006c 	.word	0x2000006c

08002000 <GPIO_CLK>:
 8002000:	00000008 00000008 00000008 00000008     ................

08002010 <GPIO_PIN>:
 8002010:	00020001 00200010                       ...... .

08002018 <BUTTON_CLK>:
 8002018:	00000001 00000010 00000010 00000010     ................
 8002028:	00000010 00000010                       ........

08002030 <BUTTON_PIN>:
 8002030:	08000001 02001000 01000400              ............

0800203c <BUTTON_PIN_SOURCE>:
 800203c:	090c0b00 0000080a                       ........

08002044 <BUTTON_PORT_SOURCE>:
 8002044:	04040400 00000404                       ........

0800204c <BUTTON_EXTI_LINE>:
 800204c:	08000001 02001000 01000400              ............

08002058 <BUTTON_IRQn>:
 8002058:	17282806 00001728                       .((.(...

08002060 <COM_TX_PORT_CLK>:
 8002060:	00000008 00000004                       ........

08002068 <COM_RX_PORT_CLK>:
 8002068:	00000008 00000004                       ........

08002070 <COM_USART_CLK>:
 8002070:	00020000 00040000                       ........

08002078 <COM_TX_AF>:
 8002078:	00000707                                ....

0800207c <COM_TX_PIN_SOURCE>:
 800207c:	00000a05                                ....

08002080 <COM_RX_AF>:
 8002080:	00000707                                ....

08002084 <COM_RX_PIN_SOURCE>:
 8002084:	00000b06                                ....

08002088 <COM_TX_PIN>:
 8002088:	04000020                                 ...

0800208c <COM_RX_PIN>:
 800208c:	08000040                                @...

08002090 <PLLMulTable>:
 8002090:	08060403 2018100c 00000030              ....... 0...

0800209c <APBAHBPrescTable>:
 800209c:	00000000 04030201 04030201 09080706     ................

080020ac <_init>:
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ae:	bf00      	nop
 80020b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b2:	bc08      	pop	{r3}
 80020b4:	469e      	mov	lr, r3
 80020b6:	4770      	bx	lr

080020b8 <_fini>:
 80020b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ba:	bf00      	nop
 80020bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020be:	bc08      	pop	{r3}
 80020c0:	469e      	mov	lr, r3
 80020c2:	4770      	bx	lr
